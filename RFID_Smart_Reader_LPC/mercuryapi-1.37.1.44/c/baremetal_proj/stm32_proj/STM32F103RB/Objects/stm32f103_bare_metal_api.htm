<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\stm32f103_bare_metal_api.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\stm32f103_bare_metal_api.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6130100: Last Updated: Fri May 12 14:19:23 2023
<BR><P>
<H3>Maximum Stack Usage =       7272 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; TMR_SR_cmdProbeBaudRate &rArr; TMR_SR_cmdVersion &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_hasMoreTags &rArr; TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[e1]">restart_reading</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b8]">TMR_SR_hasMoreTags</a><BR>
 <LI><a href="#[d7]">TMR_SR_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64]">TMR_SR_sendTimeout</a><BR>
 <LI><a href="#[b5]">TMR_SR_getNextTag</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b8]">TMR_SR_hasMoreTags</a><BR>
 <LI><a href="#[bd]">filterbytes</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bd]">filterbytes</a><BR>
 <LI><a href="#[8f]">TMR_SR_cmdReadTagMultiple</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64]">TMR_SR_sendTimeout</a><BR>
 <LI><a href="#[8a]">TMR_SR_cmdMultipleProtocolSearch</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64]">TMR_SR_sendTimeout</a><BR>
 <LI><a href="#[4c]">TMR_SR_addTagOp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">TMR_SR_addTagOp</a><BR>
 <LI><a href="#[ce]">TMR_SR_read_internal</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ce]">TMR_SR_read_internal</a><BR>
 <LI><a href="#[eb]">setAntennaReadTimeHelper</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[eb]">setAntennaReadTimeHelper</a><BR>
 <LI><a href="#[b4]">TMR_SR_executeEmbeddedRead</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64]">TMR_SR_sendTimeout</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from osdep_stm32f103rb.o(.text.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f10x.o(.text.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[42]">TMR_SR_SerialTransportNativeInit</a> from serial_transport_stm32f103rb.o(.text.TMR_SR_SerialTransportNativeInit) referenced from tm_reader.o(.text.TMR_initSerialTransportTable)
 <LI><a href="#[38]">TMR_SR_cmdStopReading</a> from serial_reader_l3.o(.text.TMR_SR_cmdStopReading) referenced from serial_reader.o(.text.TMR_SR_SerialReader_init)
 <LI><a href="#[3a]">TMR_SR_paramGet</a> from serial_reader.o(.text.TMR_SR_paramGet) referenced from serial_reader.o(.text.TMR_SR_SerialReader_init)
 <LI><a href="#[39]">TMR_SR_paramSet</a> from serial_reader.o(.text.TMR_SR_paramSet) referenced from serial_reader.o(.text.TMR_SR_SerialReader_init)
 <LI><a href="#[41]">TMR_hexDottedQuad</a> from hex_bytes.o(.text.TMR_hexDottedQuad) referenced from serial_reader.o(.text.TMR_SR_paramGet)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from serial_transport_stm32f103rb.o(.text.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[43]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[35]">main</a> from read.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3b]">s_flush</a> from serial_transport_stm32f103rb.o(.text.s_flush) referenced from serial_transport_stm32f103rb.o(.text.TMR_SR_SerialTransportNativeInit)
 <LI><a href="#[40]">s_open</a> from serial_transport_stm32f103rb.o(.text.s_open) referenced from serial_transport_stm32f103rb.o(.text.TMR_SR_SerialTransportNativeInit)
 <LI><a href="#[3e]">s_receiveBytes</a> from serial_transport_stm32f103rb.o(.text.s_receiveBytes) referenced from serial_transport_stm32f103rb.o(.text.TMR_SR_SerialTransportNativeInit)
 <LI><a href="#[3f]">s_sendBytes</a> from serial_transport_stm32f103rb.o(.text.s_sendBytes) referenced from serial_transport_stm32f103rb.o(.text.TMR_SR_SerialTransportNativeInit)
 <LI><a href="#[3d]">s_setBaudRate</a> from serial_transport_stm32f103rb.o(.text.s_setBaudRate) referenced from serial_transport_stm32f103rb.o(.text.TMR_SR_SerialTransportNativeInit)
 <LI><a href="#[3c]">s_shutdown</a> from serial_transport_stm32f103rb.o(.text.s_shutdown) referenced from serial_transport_stm32f103rb.o(.text.TMR_SR_SerialTransportNativeInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[44]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[49]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_convertFromEBV
</UL>

<P><STRONG><a name="[f7]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_reader_init_internal
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramGet
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TRD_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetGPIO
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramProbe
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_initSerialTransportTable
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e0]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[c4]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_reader_init_internal
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
</UL>

<P><STRONG><a name="[df]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[de]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[45]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[100]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>SendChar</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, serial_transport_stm32f103rb.o(.text.SendChar))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_sendBytes
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, osdep_stm32f103rb.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>TMR_RP_init_simple</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tm_reader.o(.text.TMR_RP_init_simple))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_RP_init_simple
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_reader_init_internal
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>TMR_SR_SerialReader_init</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, serial_reader.o(.text.TMR_SR_SerialReader_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = TMR_SR_SerialReader_init &rArr; TMR_reader_init_internal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_reader_init_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[42]"></a>TMR_SR_SerialTransportNativeInit</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, serial_transport_stm32f103rb.o(.text.TMR_SR_SerialTransportNativeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMR_SR_SerialTransportNativeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tm_reader.o(.text.TMR_initSerialTransportTable)
</UL>
<P><STRONG><a name="[4c]"></a>TMR_SR_addTagOp</STRONG> (Thumb, 1336 bytes, Stack size 336 bytes, serial_reader.o(.text.TMR_SR_addTagOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + In Cycle
<LI>Call Chain = TMR_SR_addTagOp &rArr;  TMR_SR_addTagOp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepEmbReadTagMultiple
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isTagTypeFilterAvail
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWriteExtParams
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadExtParams
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddWriteMemory
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddReadMemory
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2WriteTagEPC
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2LockTag
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2KillTag
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2DataWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2DataRead
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockPermaLock
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockErase
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddExtendedParams
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddAccessPassword
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupMultipleProtocolSearch
</UL>

<P><STRONG><a name="[5d]"></a>TMR_SR_boot</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, serial_reader.o(.text.TMR_SR_boot))
<BR><BR>[Stack]<UL><LI>Max Depth = 4352<LI>Call Chain = TMR_SR_boot &rArr; TMR_SR_cmdBootFirmware &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_hasMoreTags &rArr; TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBootFirmware
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_connect
</UL>

<P><STRONG><a name="[5f]"></a>TMR_SR_callSendCmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, serial_reader_l3.o(.text.TMR_SR_callSendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_SR_callSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetUserMode
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetTemperature
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetTagsRemaining
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetRegion
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetPowerMode
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetCurrentProtocol
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAvailableRegions
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAvailableProtocols
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdClearTagBuffer
</UL>

<P><STRONG><a name="[61]"></a>TMR_SR_cmdAntennaDetect</STRONG> (Thumb, 96 bytes, Stack size 280 bytes, serial_reader_l3.o(.text.TMR_SR_cmdAntennaDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TMR_SR_cmdAntennaDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTxRxMapFromPorts
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
</UL>

<P><STRONG><a name="[62]"></a>TMR_SR_cmdAuthReqResponse</STRONG> (Thumb, 104 bytes, Stack size 272 bytes, serial_reader_l3.o(.text.TMR_SR_cmdAuthReqResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = TMR_SR_cmdAuthReqResponse &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
</UL>

<P><STRONG><a name="[5e]"></a>TMR_SR_cmdBootFirmware</STRONG> (Thumb, 56 bytes, Stack size 272 bytes, serial_reader_l3.o(.text.TMR_SR_cmdBootFirmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 4336<LI>Call Chain = TMR_SR_cmdBootFirmware &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_hasMoreTags &rArr; TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillVersionInfo
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_boot
</UL>

<P><STRONG><a name="[66]"></a>TMR_SR_cmdClearTagBuffer</STRONG> (Thumb, 16 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdClearTagBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TMR_SR_cmdClearTagBuffer &rArr; TMR_SR_callSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
</UL>

<P><STRONG><a name="[bc]"></a>TMR_SR_cmdFrameHeader</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, serial_reader_l3.o(.text.TMR_SR_cmdFrameHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_SR_cmdFrameHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2LockTag
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2KillTag
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2DataRead
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockErase
</UL>

<P><STRONG><a name="[67]"></a>TMR_SR_cmdGetAntennaPortPowersAndSettlingTime</STRONG> (Thumb, 192 bytes, Stack size 288 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetAntennaPortPowersAndSettlingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = TMR_SR_cmdGetAntennaPortPowersAndSettlingTime
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPortValues
</UL>

<P><STRONG><a name="[68]"></a>TMR_SR_cmdGetAntennaReturnLoss</STRONG> (Thumb, 92 bytes, Stack size 272 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetAntennaReturnLoss))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TMR_SR_cmdGetAntennaReturnLoss
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[69]"></a>TMR_SR_cmdGetAvailableProtocols</STRONG> (Thumb, 106 bytes, Stack size 272 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetAvailableProtocols))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TMR_SR_cmdGetAvailableProtocols &rArr; TMR_SR_callSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[6a]"></a>TMR_SR_cmdGetAvailableRegions</STRONG> (Thumb, 66 bytes, Stack size 272 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetAvailableRegions))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TMR_SR_cmdGetAvailableRegions &rArr; TMR_SR_callSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[6b]"></a>TMR_SR_cmdGetCurrentProtocol</STRONG> (Thumb, 26 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetCurrentProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TMR_SR_cmdGetCurrentProtocol &rArr; TMR_SR_callSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
</UL>

<P><STRONG><a name="[6c]"></a>TMR_SR_cmdGetFrequencyHopTable</STRONG> (Thumb, 64 bytes, Stack size 272 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetFrequencyHopTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TMR_SR_cmdGetFrequencyHopTable &rArr; TMR_SR_callSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[6d]"></a>TMR_SR_cmdGetFrequencyHopTableOption</STRONG> (Thumb, 52 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetFrequencyHopTableOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdGetFrequencyHopTableOption
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetQuantizationStep
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetMinimumFrequency
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTime
</UL>

<P><STRONG><a name="[6e]"></a>TMR_SR_cmdGetFrequencyHopTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetFrequencyHopTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdGetFrequencyHopTime &rArr; TMR_SR_cmdGetFrequencyHopTableOption
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTableOption
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[6f]"></a>TMR_SR_cmdGetGPIO</STRONG> (Thumb, 144 bytes, Stack size 280 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 4344<LI>Call Chain = TMR_SR_cmdGetGPIO &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_hasMoreTags &rArr; TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[71]"></a>TMR_SR_cmdGetGPIODirection</STRONG> (Thumb, 56 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetGPIODirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdGetGPIODirection
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[72]"></a>TMR_SR_cmdGetHardwareVersion</STRONG> (Thumb, 84 bytes, Stack size 272 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetHardwareVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TMR_SR_cmdGetHardwareVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[73]"></a>TMR_SR_cmdGetMinimumFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetMinimumFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdGetMinimumFrequency &rArr; TMR_SR_cmdGetFrequencyHopTableOption
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTableOption
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[74]"></a>TMR_SR_cmdGetPowerMode</STRONG> (Thumb, 26 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TMR_SR_cmdGetPowerMode &rArr; TMR_SR_callSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[75]"></a>TMR_SR_cmdGetProtocolConfiguration</STRONG> (Thumb, 480 bytes, Stack size 304 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetProtocolConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = TMR_SR_cmdGetProtocolConfiguration &rArr; TMR_SR_convertFromEBV
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_convertFromEBV
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[78]"></a>TMR_SR_cmdGetProtocolList</STRONG> (Thumb, 92 bytes, Stack size 272 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetProtocolList))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TMR_SR_cmdGetProtocolList
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[79]"></a>TMR_SR_cmdGetQuantizationStep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetQuantizationStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdGetQuantizationStep &rArr; TMR_SR_cmdGetFrequencyHopTableOption
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTableOption
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[7a]"></a>TMR_SR_cmdGetReadTxPower</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetReadTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdGetReadTxPower &rArr; TMR_SR_cmdGetReadWriteTxPower
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReadWriteTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[7c]"></a>TMR_SR_cmdGetReadTxPowerWithLimits</STRONG> (Thumb, 68 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetReadTxPowerWithLimits))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdGetReadTxPowerWithLimits
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[7b]"></a>TMR_SR_cmdGetReadWriteTxPower</STRONG> (Thumb, 56 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetReadWriteTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdGetReadWriteTxPower
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetWriteTxPower
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReadTxPower
</UL>

<P><STRONG><a name="[7d]"></a>TMR_SR_cmdGetReaderConfiguration</STRONG> (Thumb, 140 bytes, Stack size 272 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetReaderConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TMR_SR_cmdGetReaderConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[7e]"></a>TMR_SR_cmdGetReaderStatistics</STRONG> (Thumb, 240 bytes, Stack size 280 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetReaderStatistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 4344<LI>Call Chain = TMR_SR_cmdGetReaderStatistics &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_hasMoreTags &rArr; TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[7f]"></a>TMR_SR_cmdGetReaderStats</STRONG> (Thumb, 336 bytes, Stack size 296 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetReaderStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 4360<LI>Call Chain = TMR_SR_cmdGetReaderStats &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_hasMoreTags &rArr; TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseEBVdata
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_fillReaderStats
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_convertToEBV
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_convertFromEBV
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[83]"></a>TMR_SR_cmdGetReaderWriteTimeOut</STRONG> (Thumb, 72 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetReaderWriteTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdGetReaderWriteTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[84]"></a>TMR_SR_cmdGetRegion</STRONG> (Thumb, 26 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TMR_SR_cmdGetRegion &rArr; TMR_SR_callSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
</UL>

<P><STRONG><a name="[85]"></a>TMR_SR_cmdGetRegionConfiguration</STRONG> (Thumb, 100 bytes, Stack size 272 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetRegionConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TMR_SR_cmdGetRegionConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[86]"></a>TMR_SR_cmdGetTagsRemaining</STRONG> (Thumb, 40 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetTagsRemaining))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TMR_SR_cmdGetTagsRemaining &rArr; TMR_SR_callSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdMultipleProtocolSearch
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[87]"></a>TMR_SR_cmdGetTemperature</STRONG> (Thumb, 26 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TMR_SR_cmdGetTemperature &rArr; TMR_SR_callSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[88]"></a>TMR_SR_cmdGetUserMode</STRONG> (Thumb, 26 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetUserMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TMR_SR_cmdGetUserMode &rArr; TMR_SR_callSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[89]"></a>TMR_SR_cmdGetWriteTxPower</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_reader_l3.o(.text.TMR_SR_cmdGetWriteTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdGetWriteTxPower &rArr; TMR_SR_cmdGetReadWriteTxPower
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReadWriteTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[8a]"></a>TMR_SR_cmdMultipleProtocolSearch</STRONG> (Thumb, 200 bytes, Stack size 304 bytes, serial_reader_l3.o(.text.TMR_SR_cmdMultipleProtocolSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + In Cycle
<LI>Call Chain = TMR_SR_cmdMultipleProtocolSearch &rArr;  TMR_SR_sendTimeout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetTagsRemaining
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupMultipleProtocolSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[8c]"></a>TMR_SR_cmdProbeBaudRate</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, serial_reader.o(.text.TMR_SR_cmdProbeBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4384<LI>Call Chain = TMR_SR_cmdProbeBaudRate &rArr; TMR_SR_cmdVersion &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_hasMoreTags &rArr; TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifySearchStatus
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>TMR_SR_cmdReadTagMultiple</STRONG> (Thumb, 156 bytes, Stack size 296 bytes, serial_reader_l3.o(.text.TMR_SR_cmdReadTagMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + In Cycle
<LI>Call Chain = TMR_SR_cmdReadTagMultiple &rArr;  TMR_SR_sendTimeout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultiple
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[91]"></a>TMR_SR_cmdResetReaderStatistics</STRONG> (Thumb, 48 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdResetReaderStatistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 4328<LI>Call Chain = TMR_SR_cmdResetReaderStatistics &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_hasMoreTags &rArr; TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[92]"></a>TMR_SR_cmdResetReaderStats</STRONG> (Thumb, 84 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdResetReaderStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 4328<LI>Call Chain = TMR_SR_cmdResetReaderStats &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_hasMoreTags &rArr; TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[93]"></a>TMR_SR_cmdSetAntennaPortPowersAndSettlingTime</STRONG> (Thumb, 164 bytes, Stack size 288 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetAntennaPortPowersAndSettlingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = TMR_SR_cmdSetAntennaPortPowersAndSettlingTime
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPortValues
</UL>

<P><STRONG><a name="[94]"></a>TMR_SR_cmdSetAntennaSearchList</STRONG> (Thumb, 64 bytes, Stack size 280 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetAntennaSearchList))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TMR_SR_cmdSetAntennaSearchList
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaList
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
</UL>

<P><STRONG><a name="[95]"></a>TMR_SR_cmdSetBaudRate</STRONG> (Thumb, 52 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdSetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[96]"></a>TMR_SR_cmdSetFrequencyHopTable</STRONG> (Thumb, 108 bytes, Stack size 280 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetFrequencyHopTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TMR_SR_cmdSetFrequencyHopTable
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[97]"></a>TMR_SR_cmdSetFrequencyHopTableOption</STRONG> (Thumb, 56 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetFrequencyHopTableOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdSetFrequencyHopTableOption
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[98]"></a>TMR_SR_cmdSetGPIODirection</STRONG> (Thumb, 48 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetGPIODirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdSetGPIODirection
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[99]"></a>TMR_SR_cmdSetMode</STRONG> (Thumb, 32 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdSetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserMode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetPowerMode
</UL>

<P><STRONG><a name="[9a]"></a>TMR_SR_cmdSetPowerMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdSetPowerMode &rArr; TMR_SR_cmdSetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[9b]"></a>TMR_SR_cmdSetProtocol</STRONG> (Thumb, 40 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdSetProtocol
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProtocol
</UL>

<P><STRONG><a name="[9c]"></a>TMR_SR_cmdSetProtocolConfiguration</STRONG> (Thumb, 512 bytes, Stack size 288 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetProtocolConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = TMR_SR_cmdSetProtocolConfiguration &rArr; TMR_SR_convertToEBV
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_convertToEBV
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[9d]"></a>TMR_SR_cmdSetProtocolLicenseKey</STRONG> (Thumb, 124 bytes, Stack size 272 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetProtocolLicenseKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TMR_SR_cmdSetProtocolLicenseKey &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[9e]"></a>TMR_SR_cmdSetProtocolList</STRONG> (Thumb, 116 bytes, Stack size 288 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetProtocolList))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = TMR_SR_cmdSetProtocolList
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[9f]"></a>TMR_SR_cmdSetReadTxPower</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetReadTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdSetReadTxPower &rArr; TMR_SR_cmdSetReadWriteTxPower
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReadWriteTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[a0]"></a>TMR_SR_cmdSetReadWriteTxPower</STRONG> (Thumb, 64 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetReadWriteTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdSetReadWriteTxPower
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetWriteTxPower
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReadTxPower
</UL>

<P><STRONG><a name="[a1]"></a>TMR_SR_cmdSetReaderConfiguration</STRONG> (Thumb, 140 bytes, Stack size 272 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetReaderConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TMR_SR_cmdSetReaderConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[a2]"></a>TMR_SR_cmdSetReaderWriteTimeOut</STRONG> (Thumb, 60 bytes, Stack size 272 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetReaderWriteTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TMR_SR_cmdSetReaderWriteTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[a3]"></a>TMR_SR_cmdSetRegion</STRONG> (Thumb, 124 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdSetRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[a4]"></a>TMR_SR_cmdSetRegionDwellTime</STRONG> (Thumb, 52 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetRegionDwellTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdSetRegionDwellTime
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[a5]"></a>TMR_SR_cmdSetRegionDwellTimeEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetRegionDwellTimeEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TMR_SR_cmdSetRegionDwellTimeEnable &rArr; TMR_SR_cmdSetRegionDwellTimeLbtEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionDwellTimeLbtEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[a6]"></a>TMR_SR_cmdSetRegionDwellTimeLbtEnable</STRONG> (Thumb, 44 bytes, Stack size 272 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetRegionDwellTimeLbtEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TMR_SR_cmdSetRegionDwellTimeLbtEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionLbt
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionDwellTimeEnable
</UL>

<P><STRONG><a name="[a7]"></a>TMR_SR_cmdSetRegionLbt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetRegionLbt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TMR_SR_cmdSetRegionLbt &rArr; TMR_SR_cmdSetRegionDwellTimeLbtEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionDwellTimeLbtEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[a8]"></a>TMR_SR_cmdSetRegionLbtThreshold</STRONG> (Thumb, 48 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetRegionLbtThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdSetRegionLbtThreshold
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[a9]"></a>TMR_SR_cmdSetTxRxPorts</STRONG> (Thumb, 40 bytes, Stack size 264 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetTxRxPorts))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdSetTxRxPorts
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[aa]"></a>TMR_SR_cmdSetUserMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetUserMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdSetUserMode &rArr; TMR_SR_cmdSetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[ab]"></a>TMR_SR_cmdSetUserProfile</STRONG> (Thumb, 524 bytes, Stack size 720 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetUserProfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 5080<LI>Call Chain = TMR_SR_cmdSetUserProfile &rArr; TMR_SR_getVersion &rArr; TMR_SR_cmdVersion &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_hasMoreTags &rArr; TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetRegion
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetCurrentProtocol
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareAntennas
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getVersion
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupMultipleProtocolSearch
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_RP_init_simple
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[b0]"></a>TMR_SR_cmdSetWriteTxPower</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_reader_l3.o(.text.TMR_SR_cmdSetWriteTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TMR_SR_cmdSetWriteTxPower &rArr; TMR_SR_cmdSetReadWriteTxPower
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReadWriteTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[38]"></a>TMR_SR_cmdStopReading</STRONG> (Thumb, 60 bytes, Stack size 272 bytes, serial_reader_l3.o(.text.TMR_SR_cmdStopReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = TMR_SR_cmdStopReading &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifySearchStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_reader.o(.text.TMR_SR_SerialReader_init)
</UL>
<P><STRONG><a name="[8d]"></a>TMR_SR_cmdVersion</STRONG> (Thumb, 56 bytes, Stack size 272 bytes, serial_reader_l3.o(.text.TMR_SR_cmdVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4336<LI>Call Chain = TMR_SR_cmdVersion &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_hasMoreTags &rArr; TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillVersionInfo
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdProbeBaudRate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getVersion
</UL>

<P><STRONG><a name="[b1]"></a>TMR_SR_connect</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, serial_reader.o(.text.TMR_SR_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4376<LI>Call Chain = TMR_SR_connect &rArr; TMR_SR_getVersion &rArr; TMR_SR_cmdVersion &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_hasMoreTags &rArr; TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_boot
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifySearchStatus
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkForAvailableFeatures
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>TMR_SR_convertFromEBV</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, tm_reader.o(.text.TMR_SR_convertFromEBV))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMR_SR_convertFromEBV
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStats
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetProtocolConfiguration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_fillReaderStats
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataOnly
</UL>

<P><STRONG><a name="[80]"></a>TMR_SR_convertToEBV</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, tm_reader.o(.text.TMR_SR_convertToEBV))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_SR_convertToEBV
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStats
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolConfiguration
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>

<P><STRONG><a name="[e5]"></a>TMR_SR_destroy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, serial_reader.o(.text.TMR_SR_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_SR_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>TMR_SR_executeEmbeddedRead</STRONG> (Thumb, 328 bytes, Stack size 304 bytes, serial_reader_l3.o(.text.TMR_SR_executeEmbeddedRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + In Cycle
<LI>Call Chain = TMR_SR_executeEmbeddedRead &rArr;  TMR_SR_sendTimeout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[b5]"></a>TMR_SR_getNextTag</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, serial_reader.o(.text.TMR_SR_getNextTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + In Cycle
<LI>Call Chain = TMR_SR_getNextTag &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdClearTagBuffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_postprocessReaderSpecificMetadata
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataFromMessage
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_reading
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>

<P><STRONG><a name="[ad]"></a>TMR_SR_getVersion</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, serial_reader.o(.text.TMR_SR_getVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4360<LI>Call Chain = TMR_SR_getVersion &rArr; TMR_SR_cmdVersion &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_hasMoreTags &rArr; TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifySearchStatus
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_connect
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
</UL>

<P><STRONG><a name="[b8]"></a>TMR_SR_hasMoreTags</STRONG> (Thumb, 628 bytes, Stack size 944 bytes, serial_reader.o(.text.TMR_SR_hasMoreTags))
<BR><BR>[Stack]<UL><LI>Max Depth = 3160<LI>Call Chain = TMR_SR_hasMoreTags &rArr; TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdAuthReqResponse
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramSet
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TRD_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_postprocessReaderSpecificMetadata
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataFromMessage
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdStopReading
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_reading
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>

<P><STRONG><a name="[52]"></a>TMR_SR_msgAddAccessPassword</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, serial_reader_l3.o(.text.TMR_SR_msgAddAccessPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMR_SR_msgAddAccessPassword &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[53]"></a>TMR_SR_msgAddExtendedParams</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, serial_reader_l3.o(.text.TMR_SR_msgAddExtendedParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMR_SR_msgAddExtendedParams &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[5c]"></a>TMR_SR_msgAddGEN2BlockErase</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, serial_reader_l3.o(.text.TMR_SR_msgAddGEN2BlockErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TMR_SR_msgAddGEN2BlockErase &rArr; filterbytes &rArr;  filterbytes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdFrameHeader
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[5b]"></a>TMR_SR_msgAddGEN2BlockPermaLock</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, serial_reader_l3.o(.text.TMR_SR_msgAddGEN2BlockPermaLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TMR_SR_msgAddGEN2BlockPermaLock &rArr; filterbytes &rArr;  filterbytes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[5a]"></a>TMR_SR_msgAddGEN2BlockWrite</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, serial_reader_l3.o(.text.TMR_SR_msgAddGEN2BlockWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TMR_SR_msgAddGEN2BlockWrite &rArr; filterbytes &rArr;  filterbytes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[56]"></a>TMR_SR_msgAddGEN2DataRead</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, serial_reader_l3.o(.text.TMR_SR_msgAddGEN2DataRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMR_SR_msgAddGEN2DataRead &rArr; TMR_SR_cmdFrameHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdFrameHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[58]"></a>TMR_SR_msgAddGEN2DataWrite</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, serial_reader_l3.o(.text.TMR_SR_msgAddGEN2DataWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TMR_SR_msgAddGEN2DataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[57]"></a>TMR_SR_msgAddGEN2KillTag</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, serial_reader_l3.o(.text.TMR_SR_msgAddGEN2KillTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMR_SR_msgAddGEN2KillTag &rArr; TMR_SR_cmdFrameHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdFrameHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[59]"></a>TMR_SR_msgAddGEN2LockTag</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, serial_reader_l3.o(.text.TMR_SR_msgAddGEN2LockTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMR_SR_msgAddGEN2LockTag &rArr; TMR_SR_cmdFrameHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdFrameHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[4e]"></a>TMR_SR_msgAddGEN2WriteTagEPC</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, serial_reader_l3.o(.text.TMR_SR_msgAddGEN2WriteTagEPC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMR_SR_msgAddGEN2WriteTagEPC &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[51]"></a>TMR_SR_msgAddReadMemory</STRONG> (Thumb, 176 bytes, Stack size 20 bytes, serial_reader_l3.o(.text.TMR_SR_msgAddReadMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TMR_SR_msgAddReadMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[55]"></a>TMR_SR_msgAddWriteMemory</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, serial_reader_l3.o(.text.TMR_SR_msgAddWriteMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_SR_msgAddWriteMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[8b]"></a>TMR_SR_msgSetupMultipleProtocolSearch</STRONG> (Thumb, 616 bytes, Stack size 72 bytes, serial_reader_l3.o(.text.TMR_SR_msgSetupMultipleProtocolSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = TMR_SR_msgSetupMultipleProtocolSearch &rArr; TMR_SR_addTagOp &rArr;  TMR_SR_addTagOp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultipleWithMetadata
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdMultipleProtocolSearch
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
</UL>

<P><STRONG><a name="[90]"></a>TMR_SR_msgSetupReadTagMultiple</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, serial_reader_l3.o(.text.TMR_SR_msgSetupReadTagMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TMR_SR_msgSetupReadTagMultiple &rArr; TMR_SR_msgSetupReadTagMultipleWithMetadata &rArr; filterbytes &rArr;  filterbytes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultipleWithMetadata
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdReadTagMultiple
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepEmbReadTagMultiple
</UL>

<P><STRONG><a name="[be]"></a>TMR_SR_msgSetupReadTagMultipleWithMetadata</STRONG> (Thumb, 708 bytes, Stack size 56 bytes, serial_reader_l3.o(.text.TMR_SR_msgSetupReadTagMultipleWithMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TMR_SR_msgSetupReadTagMultipleWithMetadata &rArr; filterbytes &rArr;  filterbytes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramGet
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultiple
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupMultipleProtocolSearch
</UL>

<P><STRONG><a name="[b6]"></a>TMR_SR_parseMetadataFromMessage</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, serial_reader_l3.o(.text.TMR_SR_parseMetadataFromMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TMR_SR_parseMetadataFromMessage &rArr; TMR_SR_parseMetadataOnly &rArr; extractGen2MemoryBankValues &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_u8s_per_bits
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataOnly
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
</UL>

<P><STRONG><a name="[ca]"></a>TMR_SR_parseMetadataOnly</STRONG> (Thumb, 604 bytes, Stack size 40 bytes, serial_reader_l3.o(.text.TMR_SR_parseMetadataOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TMR_SR_parseMetadataOnly &rArr; extractGen2MemoryBankValues &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_u8s_per_bits
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseEBVdata
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractGen2MemoryBankValues
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_convertFromEBV
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataFromMessage
</UL>

<P><STRONG><a name="[b7]"></a>TMR_SR_postprocessReaderSpecificMetadata</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, serial_reader_l3.o(.text.TMR_SR_postprocessReaderSpecificMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TMR_SR_postprocessReaderSpecificMetadata
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
</UL>

<P><STRONG><a name="[cd]"></a>TMR_SR_read</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, serial_reader.o(.text.TMR_SR_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = TMR_SR_read &rArr; TMR_SR_read_internal &rArr;  TMR_SR_read_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_startReading
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>TMR_SR_receiveMessage</STRONG> (Thumb, 548 bytes, Stack size 56 bytes, serial_reader_l3.o(.text.TMR_SR_receiveMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TMR_SR_receiveMessage &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR__notifyTransportListeners
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifySearchStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>

<P><STRONG><a name="[d7]"></a>TMR_SR_send</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, serial_reader_l3.o(.text.TMR_SR_send))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>

<P><STRONG><a name="[d8]"></a>TMR_SR_sendBytes</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, serial_reader_l3.o(.text.TMR_SR_sendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR__notifyTransportListeners
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>

<P><STRONG><a name="[60]"></a>TMR_SR_sendCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, serial_reader_l3.o(.text.TMR_SR_sendCmd))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetBaudRate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetAntennaSearchList
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetAntennaPortPowersAndSettlingTime
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetRegionConfiguration
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderWriteTimeOut
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderConfiguration
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReadTxPowerWithLimits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetProtocolList
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetProtocolConfiguration
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetHardwareVersion
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetGPIODirection
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAntennaReturnLoss
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAntennaPortPowersAndSettlingTime
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdAntennaDetect
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaReadTimeList
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetTxRxPorts
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionLbtThreshold
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionDwellTime
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegion
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReaderWriteTimeOut
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReaderConfiguration
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolList
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolLicenseKey
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolConfiguration
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocol
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetGPIODirection
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetFrequencyHopTableOption
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetFrequencyHopTable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionDwellTimeLbtEnable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReadWriteTxPower
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetMode
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReadWriteTxPower
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTableOption
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>

<P><STRONG><a name="[63]"></a>TMR_SR_sendMessage</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, serial_reader_l3.o(.text.TMR_SR_sendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendBytes
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdReadTagMultiple
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdMultipleProtocolSearch
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdAuthReqResponse
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeEmbeddedRead
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdStopReading
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>

<P><STRONG><a name="[64]"></a>TMR_SR_sendTimeout</STRONG> (Thumb, 156 bytes, Stack size 904 bytes, serial_reader_l3.o(.text.TMR_SR_sendTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 4064<LI>Call Chain = TMR_SR_sendTimeout &rArr; TMR_SR_hasMoreTags &rArr; TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_read_listeners
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdResetReaderStats
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdResetReaderStatistics
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdReadTagMultiple
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdMultipleProtocolSearch
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStats
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStatistics
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetGPIO
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBootFirmware
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeEmbeddedRead
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdVersion
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>

<P><STRONG><a name="[ba]"></a>TMR_TRD_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tm_reader.o(.text.TMR_TRD_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_TRD_init
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_reading
</UL>

<P><STRONG><a name="[d3]"></a>TMR__notifyTransportListeners</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, tm_reader.o(.text.TMR__notifyTransportListeners))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMR__notifyTransportListeners
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendBytes
</UL>

<P><STRONG><a name="[e4]"></a>TMR_bytesToHex</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hex_bytes.o(.text.TMR_bytesToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_bytesToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>TMR_create</STRONG> (Thumb, 236 bytes, Stack size 96 bytes, tm_reader.o(.text.TMR_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TMR_create &rArr; TMR_SR_SerialReader_init &rArr; TMR_reader_init_internal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_SerialReader_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_strcpy
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_initSerialTransportTable
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>TMR_fillReaderStats</STRONG> (Thumb, 576 bytes, Stack size 48 bytes, serial_reader_l3.o(.text.TMR_fillReaderStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TMR_fillReaderStats &rArr; TMR_SR_convertFromEBV
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseEBVdata
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_convertFromEBV
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStats
</UL>

<P><STRONG><a name="[41]"></a>TMR_hexDottedQuad</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hex_bytes.o(.text.TMR_hexDottedQuad))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_hexDottedQuad
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_reader.o(.text.TMR_SR_paramGet)
</UL>
<P><STRONG><a name="[bf]"></a>TMR_paramGet</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tm_reader.o(.text.TMR_paramGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_paramGet &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramProbe
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_startReading
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultipleWithMetadata
</UL>

<P><STRONG><a name="[c5]"></a>TMR_paramProbe</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, tm_reader.o(.text.TMR_paramProbe))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TMR_paramProbe &rArr; TMR_paramGet &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramGet
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[bb]"></a>TMR_paramSet</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tm_reader.o(.text.TMR_paramSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216<LI>Call Chain = TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_reading
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>TMR_reader_init_internal</STRONG> (Thumb, 164 bytes, Stack size 280 bytes, tm_reader.o(.text.TMR_reader_init_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = TMR_reader_init_internal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_RP_init_simple
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_SerialReader_init
</UL>

<P><STRONG><a name="[e2]"></a>TMR_startReading</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tm_reader_async.o(.text.TMR_startReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = TMR_startReading &rArr; TMR_SR_read &rArr; TMR_SR_read_internal &rArr;  TMR_SR_read_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramGet
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_reading
</UL>

<P><STRONG><a name="[e9]"></a>TMR_stopReading</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tm_reader_async.o(.text.TMR_stopReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_stopReading
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_reading
</UL>

<P><STRONG><a name="[c3]"></a>TMR_stringCopy</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tmr_utils.o(.text.TMR_stringCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMR_stringCopy &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_initSerialTransportTable
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, serial_transport_stm32f103rb.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>checkForAvailableFeatures</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tm_reader.o(.text.checkForAvailableFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = checkForAvailableFeatures
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;versionCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_connect
</UL>

<P><STRONG><a name="[af]"></a>compareAntennas</STRONG> (Thumb, 122 bytes, Stack size 28 bytes, serial_reader.o(.text.compareAntennas))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = compareAntennas
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
</UL>

<P><STRONG><a name="[cc]"></a>extractGen2MemoryBankValues</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, serial_reader_l3.o(.text.extractGen2MemoryBankValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = extractGen2MemoryBankValues &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataOnly
</UL>

<P><STRONG><a name="[ed]"></a>fillStaticTxRxMapData</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, serial_reader.o(.text.fillStaticTxRxMapData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fillStaticTxRxMapData
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTxRxMapData
</UL>

<P><STRONG><a name="[65]"></a>fillVersionInfo</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, serial_reader_l3.o(.text.fillVersionInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fillVersionInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBootFirmware
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdVersion
</UL>

<P><STRONG><a name="[4f]"></a>getReadExtParams</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, serial_reader.o(.text.getReadExtParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getReadExtParams
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[54]"></a>getWriteExtParams</STRONG> (Thumb, 412 bytes, Stack size 48 bytes, serial_reader.o(.text.getWriteExtParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getWriteExtParams
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[50]"></a>isTagTypeFilterAvail</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, serial_reader.o(.text.isTagTypeFilterAvail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isTagTypeFilterAvail
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 352 bytes, Stack size 2888 bytes, read.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 7272<LI>Call Chain = main &rArr; TMR_SR_cmdProbeBaudRate &rArr; TMR_SR_cmdVersion &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_hasMoreTags &rArr; TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_bytesToHex
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdProbeBaudRate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramSet
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramGet
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_destroy
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_connect
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_RP_init_simple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[d9]"></a>notify_read_listeners</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tm_reader_async.o(.text.notify_read_listeners))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = notify_read_listeners
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_reading
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>

<P><STRONG><a name="[81]"></a>parseEBVdata</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, serial_reader_l3.o(.text.parseEBVdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = parseEBVdata
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStats
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_fillReaderStats
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataOnly
</UL>

<P><STRONG><a name="[ac]"></a>prepForSearch</STRONG> (Thumb, 264 bytes, Stack size 232 bytes, serial_reader.o(.text.prepForSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = prepForSearch &rArr; initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetAntennaSearchList
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdAntennaDetect
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaList
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTxRxMapFromPorts
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateParams
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaReadTimeList
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareAntennas
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
</UL>

<P><STRONG><a name="[e1]"></a>restart_reading</STRONG> (Thumb, 84 bytes, Stack size 896 bytes, tm_reader_async.o(.text.restart_reading))
<BR><BR>[Stack]<UL><LI>Max Depth = 2200 + In Cycle
<LI>Call Chain = restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TRD_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_stopReading
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_startReading
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_read_listeners
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramSet
</UL>

<P><STRONG><a name="[eb]"></a>setAntennaReadTimeHelper</STRONG> (Thumb, 368 bytes, Stack size 64 bytes, serial_reader.o(.text.setAntennaReadTimeHelper))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = setAntennaReadTimeHelper &rArr;  setAntennaReadTimeHelper (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaReadTimeHelper
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaReadTimeList
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaReadTimeHelper
</UL>

<P><STRONG><a name="[e7]"></a>setAntennaReadTimeList</STRONG> (Thumb, 92 bytes, Stack size 280 bytes, serial_reader.o(.text.setAntennaReadTimeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = setAntennaReadTimeList &rArr; setAntennaReadTimeHelper &rArr;  setAntennaReadTimeHelper (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaReadTimeHelper
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
</UL>

<P><STRONG><a name="[cf]"></a>tm_gettime_consistent</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tmr_utils.o(.text.tm_gettime_consistent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tm_gettime_consistent &rArr; tmr_gettime_low
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime_low
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime_high
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[76]"></a>tm_memcpy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tmr_utils.o(.text.tm_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tm_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetProtocolConfiguration
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_stringCopy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataFromMessage
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2WriteTagEPC
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddExtendedParams
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddAccessPassword
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeEmbeddedRead
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolLicenseKey
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractGen2MemoryBankValues
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataOnly
</UL>

<P><STRONG><a name="[dd]"></a>tm_strcpy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tmr_utils.o(.text.tm_strcpy))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[d1]"></a>tm_time_subtract</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tmr_utils.o(.text.tm_time_subtract))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[cb]"></a>tm_u8s_per_bits</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tmr_utils.o(.text.tm_u8s_per_bits))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataFromMessage
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataOnly
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>

<P><STRONG><a name="[d5]"></a>tmr_gettime</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, osdep_stm32f103rb.o(.text.tmr_gettime))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime_low
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime_high
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>

<P><STRONG><a name="[ec]"></a>tmr_gettime_high</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, osdep_stm32f103rb.o(.text.tmr_gettime_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmr_gettime_high
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_gettime_consistent
</UL>

<P><STRONG><a name="[d0]"></a>tmr_gettime_low</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osdep_stm32f103rb.o(.text.tmr_gettime_low))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmr_gettime_low
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_gettime_consistent
</UL>

<P><STRONG><a name="[c2]"></a>updateTxRxMapData</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, serial_reader.o(.text.updateTxRxMapData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = updateTxRxMapData &rArr; fillStaticTxRxMapData
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillStaticTxRxMapData
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTxRxMapFromPorts
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[e6]"></a>validateParams</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, serial_reader.o(.text.validateParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = validateParams
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
</UL>

<P><STRONG><a name="[c7]"></a>validateReadPlan</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tm_reader.o(.text.validateReadPlan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validateReadPlan
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[8e]"></a>verifySearchStatus</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, serial_reader.o(.text.verifySearchStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = verifySearchStatus &rArr; TMR_SR_cmdStopReading &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdStopReading
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdProbeBaudRate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getVersion
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_connect
</UL>

<P><STRONG><a name="[e3]"></a>versionCompare</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tm_reader.o(.text.versionCompare))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkForAvailableFeatures
</UL>

<P><STRONG><a name="[ee]"></a>__0sprintf$1</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[101]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[d6]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
</UL>

<P><STRONG><a name="[102]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[103]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[104]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3a]"></a>TMR_SR_paramGet</STRONG> (Thumb, 2608 bytes, Stack size 424 bytes, serial_reader.o(.text.TMR_SR_paramGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = TMR_SR_paramGet &rArr; TMR_SR_cmdGetReaderStats &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_hasMoreTags &rArr; TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_hexDottedQuad
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetWriteTxPower
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetUserMode
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetTemperature
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetRegionConfiguration
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetRegion
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderWriteTimeOut
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStats
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStatistics
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderConfiguration
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReadTxPowerWithLimits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReadTxPower
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetQuantizationStep
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetProtocolList
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetProtocolConfiguration
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetPowerMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetMinimumFrequency
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetHardwareVersion
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetGPIODirection
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetGPIO
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTime
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetCurrentProtocol
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAvailableRegions
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAvailableProtocols
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAntennaReturnLoss
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdAntennaDetect
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTxRxMapFromPorts
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPortValues
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTxRxMapData
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_stringCopy
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_reader.o(.text.TMR_SR_SerialReader_init)
</UL>
<P><STRONG><a name="[39]"></a>TMR_SR_paramSet</STRONG> (Thumb, 2312 bytes, Stack size 296 bytes, serial_reader.o(.text.TMR_SR_paramSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 5376<LI>Call Chain = TMR_SR_paramSet &rArr; TMR_SR_cmdSetUserProfile &rArr; TMR_SR_getVersion &rArr; TMR_SR_cmdVersion &rArr; TMR_SR_sendTimeout &rArr; TMR_SR_hasMoreTags &rArr; TMR_paramSet &rArr; restart_reading &rArr;  TMR_SR_hasMoreTags (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetBaudRate
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdResetReaderStats
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdResetReaderStatistics
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderWriteTimeOut
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetProtocolConfiguration
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProtocol
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPortValues
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTxRxMapFromPorts
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateReadPlan
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramProbe
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetWriteTxPower
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserMode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetTxRxPorts
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionLbtThreshold
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionLbt
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionDwellTimeEnable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionDwellTime
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegion
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReaderWriteTimeOut
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReaderConfiguration
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReadTxPower
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolList
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolLicenseKey
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolConfiguration
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetPowerMode
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetGPIODirection
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetFrequencyHopTableOption
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetFrequencyHopTable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_reader.o(.text.TMR_SR_SerialReader_init)
</UL>
<P><STRONG><a name="[ce]"></a>TMR_SR_read_internal</STRONG> (Thumb, 968 bytes, Stack size 376 bytes, serial_reader.o(.text.TMR_SR_read_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + In Cycle
<LI>Call Chain = TMR_SR_read_internal &rArr;  TMR_SR_read_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime_low
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdReadTagMultiple
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdMultipleProtocolSearch
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetTagsRemaining
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProtocol
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_time_subtract
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_gettime_consistent
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeEmbeddedRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read
</UL>

<P><STRONG><a name="[c0]"></a>getPortValues</STRONG> (Thumb, 178 bytes, Stack size 544 bytes, serial_reader.o(.text.getPortValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = getPortValues &rArr; initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAntennaPortPowersAndSettlingTime
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTxRxMapFromPorts
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[c1]"></a>initTxRxMapFromPorts</STRONG> (Thumb, 46 bytes, Stack size 152 bytes, serial_reader.o(.text.initTxRxMapFromPorts))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdAntennaDetect
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTxRxMapData
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPortValues
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPortValues
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
</UL>

<P><STRONG><a name="[4d]"></a>prepEmbReadTagMultiple</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, serial_reader.o(.text.prepEmbReadTagMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prepEmbReadTagMultiple &rArr; TMR_SR_msgSetupReadTagMultiple &rArr; TMR_SR_msgSetupReadTagMultipleWithMetadata &rArr; filterbytes &rArr;  filterbytes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[e8]"></a>setAntennaList</STRONG> (Thumb, 112 bytes, Stack size 96 bytes, serial_reader.o(.text.setAntennaList))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = setAntennaList &rArr; TMR_SR_cmdSetAntennaSearchList
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetAntennaSearchList
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
</UL>

<P><STRONG><a name="[c8]"></a>setPortValues</STRONG> (Thumb, 180 bytes, Stack size 552 bytes, serial_reader.o(.text.setPortValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = setPortValues &rArr; initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetAntennaPortPowersAndSettlingTime
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTxRxMapFromPorts
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[c9]"></a>setProtocol</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, serial_reader.o(.text.setProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = setProtocol &rArr; TMR_SR_cmdSetProtocol
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[bd]"></a>filterbytes</STRONG> (Thumb, 944 bytes, Stack size 48 bytes, serial_reader_l3.o(.text.filterbytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = filterbytes &rArr;  filterbytes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_u8s_per_bits
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_convertToEBV
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockPermaLock
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockErase
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultipleWithMetadata
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>

<P><STRONG><a name="[d4]"></a>tm_crc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, serial_reader_l3.o(.text.tm_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tm_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>

<P><STRONG><a name="[3b]"></a>s_flush</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, serial_transport_stm32f103rb.o(.text.s_flush))
<BR>[Address Reference Count : 1]<UL><LI> serial_transport_stm32f103rb.o(.text.TMR_SR_SerialTransportNativeInit)
</UL>
<P><STRONG><a name="[40]"></a>s_open</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, serial_transport_stm32f103rb.o(.text.s_open))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_SerialTransportNativeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_transport_stm32f103rb.o(.text.TMR_SR_SerialTransportNativeInit)
</UL>
<P><STRONG><a name="[3e]"></a>s_receiveBytes</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, serial_transport_stm32f103rb.o(.text.s_receiveBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = s_receiveBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_transport_stm32f103rb.o(.text.TMR_SR_SerialTransportNativeInit)
</UL>
<P><STRONG><a name="[3f]"></a>s_sendBytes</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, serial_transport_stm32f103rb.o(.text.s_sendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = s_sendBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_transport_stm32f103rb.o(.text.TMR_SR_SerialTransportNativeInit)
</UL>
<P><STRONG><a name="[3d]"></a>s_setBaudRate</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, serial_transport_stm32f103rb.o(.text.s_setBaudRate))
<BR>[Address Reference Count : 1]<UL><LI> serial_transport_stm32f103rb.o(.text.TMR_SR_SerialTransportNativeInit)
</UL>
<P><STRONG><a name="[3c]"></a>s_shutdown</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, serial_transport_stm32f103rb.o(.text.s_shutdown))
<BR>[Address Reference Count : 1]<UL><LI> serial_transport_stm32f103rb.o(.text.TMR_SR_SerialTransportNativeInit)
</UL>
<P><STRONG><a name="[dc]"></a>TMR_initSerialTransportTable</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, tm_reader.o(.text.TMR_initSerialTransportTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TMR_initSerialTransportTable &rArr; TMR_stringCopy &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_stringCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[ef]"></a>_printf_core</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[43]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
