<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\rfid.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\rfid.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Jun 27 19:56:24 2024
<BR><P>
<H3>Maximum Stack Usage =       5584 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Wifi_Manager &rArr; Check_for_WiFi_Update &rArr; Read_ESP_Data &rArr; Get_Read_Write_Status &rArr; spi0_sendReceive_message
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c]">Reset_Handler</a>
 <LI><a href="#[63]">__user_initial_stackheap</a>
 <LI><a href="#[d]">Undef_Handler</a>
 <LI><a href="#[e]">SWI_Handler</a>
 <LI><a href="#[f]">PAbt_Handler</a>
 <LI><a href="#[10]">DAbt_Handler</a>
 <LI><a href="#[11]">IRQ_Handler</a>
 <LI><a href="#[12]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[d4]">TMR_SR_sendTimeout</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a4]">TMR_SR_getNextTag</a><BR>
 <LI><a href="#[12a]">filterbytes</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12a]">filterbytes</a><BR>
 <LI><a href="#[be]">TMR_SR_addTagOp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[be]">TMR_SR_addTagOp</a><BR>
 <LI><a href="#[168]">setAntennaReadTimeHelper</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[168]">setAntennaReadTimeHelper</a><BR>
 <LI><a href="#[d]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">Undef_Handler</a><BR>
 <LI><a href="#[e]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">SWI_Handler</a><BR>
 <LI><a href="#[f]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">PAbt_Handler</a><BR>
 <LI><a href="#[10]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DAbt_Handler</a><BR>
 <LI><a href="#[11]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">IRQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">DAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[12]">FIQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[18]">I2C_irq</a> from i2c.o(i.I2C_irq) referenced from isr_manager.o(i.InitInterrupt)
 <LI><a href="#[11]">IRQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[f]">PAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[c]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1a]">SPI0_irq</a> from spi.o(i.SPI0_irq) referenced from isr_manager.o(i.InitInterrupt)
 <LI><a href="#[e]">SWI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[26]">TMR_SR_SerialTransportNativeInit</a> from serial_transport_dummy.o(i.TMR_SR_SerialTransportNativeInit) referenced from tm_reader.o(i.TMR_initSerialTransportTable)
 <LI><a href="#[1d]">TMR_SR_cmdStopReading</a> from serial_reader_l3.o(i.TMR_SR_cmdStopReading) referenced from serial_reader.o(i.TMR_SR_SerialReader_init)
 <LI><a href="#[1f]">TMR_SR_paramGet</a> from serial_reader.o(i.TMR_SR_paramGet) referenced from serial_reader.o(i.TMR_SR_SerialReader_init)
 <LI><a href="#[1e]">TMR_SR_paramSet</a> from serial_reader.o(i.TMR_SR_paramSet) referenced from serial_reader.o(i.TMR_SR_SerialReader_init)
 <LI><a href="#[1b]">UART1_irq</a> from isr_manager.o(i.UART1_irq) referenced from isr_manager.o(i.InitInterrupt)
 <LI><a href="#[d]">Undef_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[27]">__main</a> from __main.o(!!!main) referenced from startup.o(RESET)
 <LI><a href="#[16]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[15]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[17]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[14]">main</a> from main.o(i.main) referenced from __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[25]">s_flush</a> from serial_transport_dummy.o(i.s_flush) referenced from serial_transport_dummy.o(i.TMR_SR_SerialTransportDummyInit)
 <LI><a href="#[20]">s_open</a> from serial_transport_dummy.o(i.s_open) referenced from serial_transport_dummy.o(i.TMR_SR_SerialTransportDummyInit)
 <LI><a href="#[22]">s_receiveBytes</a> from serial_transport_dummy.o(i.s_receiveBytes) referenced from serial_transport_dummy.o(i.TMR_SR_SerialTransportDummyInit)
 <LI><a href="#[21]">s_sendBytes</a> from serial_transport_dummy.o(i.s_sendBytes) referenced from serial_transport_dummy.o(i.TMR_SR_SerialTransportDummyInit)
 <LI><a href="#[23]">s_setBaudRate</a> from serial_transport_dummy.o(i.s_setBaudRate) referenced from serial_transport_dummy.o(i.TMR_SR_SerialTransportDummyInit)
 <LI><a href="#[24]">s_shutdown</a> from serial_transport_dummy.o(i.s_shutdown) referenced from serial_transport_dummy.o(i.TMR_SR_SerialTransportDummyInit)
 <LI><a href="#[1c]">timer1_irq</a> from timer.o(i.timer1_irq) referenced from isr_manager.o(i.InitInterrupt)
 <LI><a href="#[19]">wifi_handsake_irq</a> from wifi_utils.o(i.wifi_handsake_irq) referenced from isr_manager.o(i.InitInterrupt)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[29]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2b]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[16d]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2c]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[16e]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2d]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[4e]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[2f]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex (via Veneer)
</UL>

<P><STRONG><a name="[31]"></a>_printf_c</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char (via Veneer)
</UL>

<P><STRONG><a name="[33]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[16f]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[38]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[170]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[171]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[172]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[173]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[174]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[175]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[176]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[177]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[178]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[179]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[17b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[17c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[17d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[17e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[17f]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[180]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[181]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[182]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[183]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[184]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[185]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[186]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[187]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[188]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[189]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[18a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[18b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2a]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[18c]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[35]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[37]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[18d]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[39]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[18e]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[65]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[3b]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[18f]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3d]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[63]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[190]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__aeabi_llsl</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_convertFromEBV
</UL>

<P><STRONG><a name="[192]"></a>_ll_shift_l</STRONG> (ARM, 40 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_sendbuffer (via Veneer)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_send_reveice_PING (via Veneer)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_receivebuffer (via Veneer)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiManager_Init (via Veneer)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager (via Veneer)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ESP_Command (via Veneer)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reader_recovery (via Veneer)
</UL>

<P><STRONG><a name="[41]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_reader_init_internal (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage (via Veneer)
</UL>

<P><STRONG><a name="[43]"></a>_printf_pre_padding</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[45]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[46]"></a>_printf_str</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[2e]"></a>_printf_int_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
</UL>

<P><STRONG><a name="[30]"></a>_printf_int_hex</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x (via Veneer)
</UL>

<P><STRONG><a name="[193]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__printf</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[4f]"></a>strtok</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strtok &rArr; __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create (via Veneer)
</UL>

<P><STRONG><a name="[6e]"></a>strstr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Manager (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_for_WiFi_Update (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isPassthroughResponseValid (via Veneer)
</UL>

<P><STRONG><a name="[b5]"></a>memcmp</STRONG> (Thumb, 118 bytes, Stack size 4 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ESP_Command (via Veneer)
</UL>

<P><STRONG><a name="[12c]"></a>strlen</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage (via Veneer)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHardwareInfo (via Veneer)
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet (via Veneer)
</UL>

<P><STRONG><a name="[144]"></a>strncmp</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create (via Veneer)
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_data_bytes
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Manager
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiManager_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTxRxMapData
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Module_Current_State
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Wifi_Response_Passtrough
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Module_Current_State
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_for_WiFi_Update
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SET_Command_Request
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_GET_passtrough_response
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GET_TagInformation
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[51]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[194]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__aeabi_memmove</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memmove.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
</UL>

<P><STRONG><a name="[53]"></a>__rt_memmove</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memmove.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[195]"></a>__memmove_lastfew</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Manager
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_SerialReader_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ESP_Command
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_GET_passtrough_response
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[196]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_irq
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[58]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[57]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramProbe
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetGPIO
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_initSerialTransportTable
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[5a]"></a>strncpy</STRONG> (ARM, 108 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[147]"></a>strcmp</STRONG> (ARM, 240 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetGPIO
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupMultipleProtocolSearch
</UL>

<P><STRONG><a name="[19c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>_printf_int_common</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[42]"></a>_printf_char_common</STRONG> (Thumb, 34 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[15]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>_printf_cs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[32]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c (via Veneer)
</UL>

<P><STRONG><a name="[34]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[40]"></a>_printf_char_file</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror (via Veneer)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[50]"></a>__strtok_internal</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, strtok_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_memmove4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>__aeabi_memmove8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__rt_memmove_w</STRONG> (ARM, 128 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[55]"></a>__memmove_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[19f]"></a>__memmove_lastfew_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[1a0]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1a1]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>strcspn</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[5f]"></a>strspn</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[36]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3a]"></a>exit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1a2]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaReadTimeHelper
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupMultipleProtocolSearch
</UL>

<P><STRONG><a name="[6b]"></a>Check_for_WiFi_Update</STRONG> (ARM, 324 bytes, Stack size 4176 bytes, wifi_utils.o(i.Check_for_WiFi_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 5248<LI>Call Chain = Check_for_WiFi_Update &rArr; Read_ESP_Data &rArr; Get_Read_Write_Status &rArr; spi0_sendReceive_message
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ESP_Data
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_transition
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Manager
</UL>

<P><STRONG><a name="[ac]"></a>Get_HandsakePin_Status</STRONG> (ARM, 36 bytes, Stack size 0 bytes, wifi_utils.o(i.Get_HandsakePin_Status))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Manager
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_transition
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_ESP_Send_Permission
</UL>

<P><STRONG><a name="[73]"></a>Get_Module_Current_State</STRONG> (ARM, 32 bytes, Stack size 8 bytes, wifi_utils.o(i.Get_Module_Current_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Module_Current_State
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Manager
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiManager_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_GET_is_Wifi_Connected_status
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_GET_is_ClientConnected
</UL>

<P><STRONG><a name="[76]"></a>Get_Wifi_Response_Passtrough</STRONG> (ARM, 32 bytes, Stack size 8 bytes, wifi_utils.o(i.Get_Wifi_Response_Passtrough))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Wifi_Response_Passtrough
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Manager
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_GET_passtrough_response
</UL>

<P><STRONG><a name="[156]"></a>Get_Wifi_Response_Ready_State</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wifi_utils.o(i.Get_Wifi_Response_Ready_State))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Manager
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_GET_passtrough_response
</UL>

<P><STRONG><a name="[77]"></a>HostComm_Manager</STRONG> (ARM, 252 bytes, Stack size 24 bytes, hostcommmanager.o(i.HostComm_Manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HostComm_Manager &rArr; HostComm_decode_requests &rArr; Wifi_GET_is_ClientConnected &rArr; Get_Module_Current_State
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_response_ready_status
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_command_status
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_RX_ready_status
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_request_stayAwake
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_command
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_RX_ready_status
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_check_CRC_after_RX_finish
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_Set_StayAwake
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_decode_requests
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>HostComm_Manager_Init</STRONG> (ARM, 24 bytes, Stack size 8 bytes, hostcommmanager.o(i.HostComm_Manager_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HostComm_Manager_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_Set_InitFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[164]"></a>I2C_init</STRONG> (ARM, 44 bytes, Stack size 0 bytes, i2c.o(i.I2C_init))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18]"></a>I2C_irq</STRONG> (ARM, 932 bytes, Stack size 32 bytes, i2c.o(i.I2C_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = I2C_irq &rArr; compute_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_crc
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isr_manager.o(i.InitInterrupt)
</UL>
<P><STRONG><a name="[8b]"></a>InitInterrupt</STRONG> (ARM, 148 bytes, Stack size 8 bytes, isr_manager.o(i.InitInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>LP_Get_Functionality_Init_State</STRONG> (ARM, 40 bytes, Stack size 0 bytes, lp_mode_manager.o(i.LP_Get_Functionality_Init_State))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Manager
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_decode_requests
</UL>

<P><STRONG><a name="[88]"></a>LP_Get_System_Init_State</STRONG> (ARM, 68 bytes, Stack size 0 bytes, lp_mode_manager.o(i.LP_Get_System_Init_State))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_decode_requests
</UL>

<P><STRONG><a name="[8d]"></a>LP_Mode_Manager_Init</STRONG> (ARM, 164 bytes, Stack size 8 bytes, lp_mode_manager.o(i.LP_Mode_Manager_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LP_Mode_Manager_Init &rArr; Wdg_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdg_Start
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_Set_InitFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>LP_Set_InitFlag</STRONG> (ARM, 72 bytes, Stack size 0 bytes, lp_mode_manager.o(i.LP_Set_InitFlag))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Manager
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiManager_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReaderManagerInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_Mode_Manager_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_Manager_Init
</UL>

<P><STRONG><a name="[79]"></a>LP_Set_StayAwake</STRONG> (ARM, 72 bytes, Stack size 0 bytes, lp_mode_manager.o(i.LP_Set_StayAwake))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Manager
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiManager_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_Manager
</UL>

<P><STRONG><a name="[6c]"></a>Read_ESP_Data</STRONG> (ARM, 212 bytes, Stack size 1032 bytes, wifi_utils.o(i.Read_ESP_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = Read_ESP_Data &rArr; Get_Read_Write_Status &rArr; spi0_sendReceive_message
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_sendReceive_message
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Read_EOF
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Read_Write_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ESP_Command
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ready_Status
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_for_WiFi_Update
</UL>

<P><STRONG><a name="[90]"></a>Read_Ready_Status</STRONG> (ARM, 144 bytes, Stack size 40 bytes, wifi_utils.o(i.Read_Ready_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = Read_Ready_Status &rArr; Read_ESP_Data &rArr; Get_Read_Write_Status &rArr; spi0_sendReceive_message
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ESP_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiManager_Init
</UL>

<P><STRONG><a name="[91]"></a>ReaderManagerInit</STRONG> (ARM, 104 bytes, Stack size 8 bytes, reader_manager.o(i.ReaderManagerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = ReaderManagerInit &rArr; ConfigInit &rArr; TMR_SR_connect &rArr; TMR_SR_getVersion &rArr; TMR_SR_cmdVersion &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_reset_timer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_request_timer
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_configure_timer
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_Set_InitFlag
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_SerialTransportDummyInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>Reader_GET_TagInformation</STRONG> (ARM, 120 bytes, Stack size 16 bytes, reader_manager.o(i.Reader_GET_TagInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Reader_GET_TagInformation
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_decode_requests
</UL>

<P><STRONG><a name="[15a]"></a>Reader_GET_internal_failure_status</STRONG> (ARM, 36 bytes, Stack size 0 bytes, reader_manager.o(i.Reader_GET_internal_failure_status))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Manager
</UL>

<P><STRONG><a name="[83]"></a>Reader_GET_request_status</STRONG> (ARM, 36 bytes, Stack size 0 bytes, reader_manager.o(i.Reader_GET_request_status))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_decode_requests
</UL>

<P><STRONG><a name="[97]"></a>Reader_HW_Reset</STRONG> (ARM, 52 bytes, Stack size 8 bytes, reader_manager.o(i.Reader_HW_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Reader_HW_Reset &rArr; TIMER_SOFTWARE_Wait &rArr; TIMER_SOFTWARE_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reader_recovery
</UL>

<P><STRONG><a name="[99]"></a>Reader_Manager</STRONG> (ARM, 2104 bytes, Stack size 16 bytes, reader_manager.o(i.Reader_Manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 3032 + Unknown Stack Size
<LI>Call Chain = Reader_Manager &rArr; TMR_startReading &rArr; TMR_SR_read &rArr; TMR_SR_read_internal &rArr; prepForSearch &rArr; setAntennaReadTimeList &rArr; TMR_SR_cmdSetPerAntennaTime &rArr; initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_get_CommErrors
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_stop_timer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_start_timer
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_reset_timer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_is_Running
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_interrupt_pending
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_clear_interrupt
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_Wait
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_HW_Reset
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramSet
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramGet
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_GET_passtrough_response
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_GET_is_Wifi_Connected_status
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_validate_tag_criteria_cmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reader_recovery
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_HW_Reader
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_Set_StayAwake
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_Set_InitFlag
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_Get_Functionality_Init_State
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_stopReading
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_startReading
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>Reader_SET_read_request</STRONG> (ARM, 68 bytes, Stack size 0 bytes, reader_manager.o(i.Reader_SET_read_request))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_decode_requests
</UL>

<P><STRONG><a name="[14b]"></a>RingBufEmpty</STRONG> (ARM, 36 bytes, Stack size 0 bytes, ringbuf.o(i.RingBufEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_send_reveice_PING
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_flush
</UL>

<P><STRONG><a name="[14a]"></a>RingBufFlush</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ringbuf.o(i.RingBufFlush))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_flush
</UL>

<P><STRONG><a name="[8c]"></a>RingBufInit</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ringbuf.o(i.RingBufInit))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitInterrupt
</UL>

<P><STRONG><a name="[ad]"></a>RingBufRead</STRONG> (ARM, 56 bytes, Stack size 24 bytes, ringbuf.o(i.RingBufRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RingBufRead &rArr; RingBufReadOne
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufReadOne
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_receivebuffer
</UL>

<P><STRONG><a name="[ae]"></a>RingBufReadOne</STRONG> (ARM, 48 bytes, Stack size 16 bytes, ringbuf.o(i.RingBufReadOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBufReadOne
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateIndexAtomic
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_send_reveice_PING
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_receivebuffer
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufRead
</UL>

<P><STRONG><a name="[14d]"></a>RingBufUsed</STRONG> (ARM, 44 bytes, Stack size 0 bytes, ringbuf.o(i.RingBufUsed))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_receivebuffer
</UL>

<P><STRONG><a name="[b0]"></a>RingBufWriteOne</STRONG> (ARM, 48 bytes, Stack size 16 bytes, ringbuf.o(i.RingBufWriteOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBufWriteOne
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateIndexAtomic
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_irq
</UL>

<P><STRONG><a name="[b1]"></a>SPI0_init</STRONG> (ARM, 112 bytes, Stack size 8 bytes, spi.o(i.SPI0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_set_slave_select
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>SPI0_irq</STRONG> (ARM, 128 bytes, Stack size 12 bytes, spi.o(i.SPI0_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI0_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isr_manager.o(i.InitInterrupt)
</UL>
<P><STRONG><a name="[b3]"></a>Send_ESP_Command</STRONG> (ARM, 676 bytes, Stack size 264 bytes, wifi_utils.o(i.Send_ESP_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 4488 + Unknown Stack Size
<LI>Call Chain = Send_ESP_Command &rArr; Write_ESP_Data &rArr; Get_Read_Write_Status &rArr; spi0_sendReceive_message
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ESP_Data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ESP_Data
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_transition
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_ESP_Send_Permission
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Manager
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiManager_Init
</UL>

<P><STRONG><a name="[b6]"></a>Set_Module_Current_State</STRONG> (ARM, 28 bytes, Stack size 16 bytes, wifi_utils.o(i.Set_Module_Current_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Set_Module_Current_State
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Manager
</UL>

<P><STRONG><a name="[15b]"></a>Set_Passthrough_Mode</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wifi_utils.o(i.Set_Passthrough_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Manager
</UL>

<P><STRONG><a name="[158]"></a>Set_Wifi_Response_Ready_State</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wifi_utils.o(i.Set_Wifi_Response_Ready_State))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_GET_passtrough_response
</UL>

<P><STRONG><a name="[162]"></a>TIMER_Init</STRONG> (ARM, 72 bytes, Stack size 0 bytes, timer.o(i.TIMER_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>TIMER_SOFTWARE_ModX</STRONG> (ARM, 820 bytes, Stack size 8 bytes, timer_software.o(i.TIMER_SOFTWARE_ModX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_SOFTWARE_ModX
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_irq
</UL>

<P><STRONG><a name="[98]"></a>TIMER_SOFTWARE_Wait</STRONG> (ARM, 276 bytes, Stack size 8 bytes, timer_software.o(i.TIMER_SOFTWARE_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_SOFTWARE_Wait &rArr; TIMER_SOFTWARE_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_stop_timer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_start_timer
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_configure_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_HW_Reset
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiManager_Perform_HW_Reset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reader_recovery
</UL>

<P><STRONG><a name="[9c]"></a>TIMER_SOFTWARE_clear_interrupt</STRONG> (ARM, 40 bytes, Stack size 0 bytes, timer_software.o(i.TIMER_SOFTWARE_clear_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_sendbuffer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_send_reveice_PING
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_receivebuffer
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_transition
</UL>

<P><STRONG><a name="[95]"></a>TIMER_SOFTWARE_configure_timer</STRONG> (ARM, 608 bytes, Stack size 8 bytes, timer_software.o(i.TIMER_SOFTWARE_configure_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_SOFTWARE_configure_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_sendbuffer
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_receivebuffer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_Wait
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReaderManagerInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_utils_Init
</UL>

<P><STRONG><a name="[b8]"></a>TIMER_SOFTWARE_enable_timer</STRONG> (ARM, 128 bytes, Stack size 0 bytes, timer_software.o(i.TIMER_SOFTWARE_enable_timer))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_start_timer
</UL>

<P><STRONG><a name="[b7]"></a>TIMER_SOFTWARE_init</STRONG> (ARM, 144 bytes, Stack size 8 bytes, timer_software.o(i.TIMER_SOFTWARE_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_SOFTWARE_init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_request_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>TIMER_SOFTWARE_interrupt_pending</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_software.o(i.TIMER_SOFTWARE_interrupt_pending))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_sendbuffer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_send_reveice_PING
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_receivebuffer
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_transition
</UL>

<P><STRONG><a name="[a0]"></a>TIMER_SOFTWARE_is_Running</STRONG> (ARM, 152 bytes, Stack size 0 bytes, timer_software.o(i.TIMER_SOFTWARE_is_Running))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_sendbuffer
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
</UL>

<P><STRONG><a name="[94]"></a>TIMER_SOFTWARE_request_timer</STRONG> (ARM, 204 bytes, Stack size 0 bytes, timer_software.o(i.TIMER_SOFTWARE_request_timer))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReaderManagerInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_utils_Init
</UL>

<P><STRONG><a name="[96]"></a>TIMER_SOFTWARE_reset_timer</STRONG> (ARM, 24 bytes, Stack size 0 bytes, timer_software.o(i.TIMER_SOFTWARE_reset_timer))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_sendbuffer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_send_reveice_PING
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_receivebuffer
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReaderManagerInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_transition
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_utils_Init
</UL>

<P><STRONG><a name="[9d]"></a>TIMER_SOFTWARE_start_timer</STRONG> (ARM, 148 bytes, Stack size 8 bytes, timer_software.o(i.TIMER_SOFTWARE_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_SOFTWARE_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_enable_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_sendbuffer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_send_reveice_PING
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_receivebuffer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_Wait
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_transition
</UL>

<P><STRONG><a name="[9b]"></a>TIMER_SOFTWARE_stop_timer</STRONG> (ARM, 96 bytes, Stack size 0 bytes, timer_software.o(i.TIMER_SOFTWARE_stop_timer))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_receivebuffer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_Wait
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_transition
</UL>

<P><STRONG><a name="[28]"></a>TIMER_irq</STRONG> (ARM, 72 bytes, Stack size 24 bytes, timer.o(i.TIMER_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER_irq &rArr; TIMER_SOFTWARE_ModX
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdg_isFeedRequested
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdg_FeedSequence
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_ModX
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>

<P><STRONG><a name="[72]"></a>TMR_RP_init_simple</STRONG> (ARM, 92 bytes, Stack size 8 bytes, tm_reader.o(i.TMR_RP_init_simple))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_RP_init_simple
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_reader_init_internal
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigInit
</UL>

<P><STRONG><a name="[bc]"></a>TMR_SR_SerialReader_init</STRONG> (ARM, 364 bytes, Stack size 48 bytes, serial_reader.o(i.TMR_SR_SerialReader_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = TMR_SR_SerialReader_init &rArr; TMR_reader_init_internal &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_reader_init_internal
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[92]"></a>TMR_SR_SerialTransportDummyInit</STRONG> (ARM, 64 bytes, Stack size 0 bytes, serial_transport_dummy.o(i.TMR_SR_SerialTransportDummyInit))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReaderManagerInit
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_SerialTransportNativeInit
</UL>

<P><STRONG><a name="[26]"></a>TMR_SR_SerialTransportNativeInit</STRONG> (ARM, 44 bytes, Stack size 16 bytes, serial_transport_dummy.o(i.TMR_SR_SerialTransportNativeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_SR_SerialTransportNativeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_SerialTransportDummyInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tm_reader.o(i.TMR_initSerialTransportTable)
</UL>
<P><STRONG><a name="[be]"></a>TMR_SR_addTagOp</STRONG> (ARM, 3548 bytes, Stack size 336 bytes, serial_reader.o(i.TMR_SR_addTagOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + In Cycle
<LI>Call Chain = TMR_SR_addTagOp &rArr;  TMR_SR_addTagOp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddWriteMemory
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddReadMemory
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2WriteTagEPC
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2LockTag
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2KillTag
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2DataWrite
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2DataRead
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockWrite
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockPermaLock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockErase
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddExtendedParams
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddAccessPassword
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isTagTypeFilterAvail
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWriteExtParams
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadExtParams
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepEmbReadTagMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupMultipleProtocolSearch
</UL>

<P><STRONG><a name="[13a]"></a>TMR_SR_antennaDecoding</STRONG> (ARM, 328 bytes, Stack size 8 bytes, serial_reader_l3.o(i.TMR_SR_antennaDecoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_SR_antennaDecoding
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_postprocessReaderSpecificMetadata
</UL>

<P><STRONG><a name="[cf]"></a>TMR_SR_boot</STRONG> (ARM, 224 bytes, Stack size 24 bytes, serial_reader.o(i.TMR_SR_boot))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616 + Unknown Stack Size
<LI>Call Chain = TMR_SR_boot &rArr; TMR_SR_cmdBootFirmware &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBootFirmware
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_connect
</UL>

<P><STRONG><a name="[d1]"></a>TMR_SR_callSendCmd</STRONG> (ARM, 92 bytes, Stack size 24 bytes, serial_reader_l3.o(i.TMR_SR_callSendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376 + Unknown Stack Size
<LI>Call Chain = TMR_SR_callSendCmd &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetUserMode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetTemperature
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetTagsRemaining
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetRegion
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetPowerMode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetCurrentProtocol
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAvailableRegions
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAvailableProtocols
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdClearTagBuffer
</UL>

<P><STRONG><a name="[d3]"></a>TMR_SR_cmdAntennaDetect</STRONG> (ARM, 300 bytes, Stack size 288 bytes, serial_reader_l3.o(i.TMR_SR_cmdAntennaDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdAntennaDetect &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTxRxMapFromPorts
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[d0]"></a>TMR_SR_cmdBootFirmware</STRONG> (ARM, 140 bytes, Stack size 272 bytes, serial_reader_l3.o(i.TMR_SR_cmdBootFirmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdBootFirmware &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillVersionInfo
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_boot
</UL>

<P><STRONG><a name="[d6]"></a>TMR_SR_cmdClearTagBuffer</STRONG> (ARM, 40 bytes, Stack size 264 bytes, serial_reader_l3.o(i.TMR_SR_cmdClearTagBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdClearTagBuffer &rArr; TMR_SR_callSendCmd &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
</UL>

<P><STRONG><a name="[129]"></a>TMR_SR_cmdFrameHeader</STRONG> (ARM, 284 bytes, Stack size 16 bytes, serial_reader_l3.o(i.TMR_SR_cmdFrameHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_SR_cmdFrameHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2LockTag
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2KillTag
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2DataRead
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockErase
</UL>

<P><STRONG><a name="[d7]"></a>TMR_SR_cmdGetAntennaPortPowersAndSettlingTime</STRONG> (ARM, 572 bytes, Stack size 288 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetAntennaPortPowersAndSettlingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetAntennaPortPowersAndSettlingTime &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPortValues
</UL>

<P><STRONG><a name="[d8]"></a>TMR_SR_cmdGetAntennaReturnLoss</STRONG> (ARM, 308 bytes, Stack size 288 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetAntennaReturnLoss))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetAntennaReturnLoss &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[d9]"></a>TMR_SR_cmdGetAvailableProtocols</STRONG> (ARM, 248 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetAvailableProtocols))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetAvailableProtocols &rArr; TMR_SR_callSendCmd &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[da]"></a>TMR_SR_cmdGetAvailableRegions</STRONG> (ARM, 168 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetAvailableRegions))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetAvailableRegions &rArr; TMR_SR_callSendCmd &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[db]"></a>TMR_SR_cmdGetCurrentProtocol</STRONG> (ARM, 84 bytes, Stack size 272 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetCurrentProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetCurrentProtocol &rArr; TMR_SR_callSendCmd &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[dc]"></a>TMR_SR_cmdGetFrequencyHopTable</STRONG> (ARM, 200 bytes, Stack size 288 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetFrequencyHopTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetFrequencyHopTable &rArr; TMR_SR_callSendCmd &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[dd]"></a>TMR_SR_cmdGetFrequencyHopTableOption</STRONG> (ARM, 212 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetFrequencyHopTableOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetFrequencyHopTableOption &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetQuantizationStep
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetMinimumFrequency
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTime
</UL>

<P><STRONG><a name="[de]"></a>TMR_SR_cmdGetFrequencyHopTime</STRONG> (ARM, 36 bytes, Stack size 16 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetFrequencyHopTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetFrequencyHopTime &rArr; TMR_SR_cmdGetFrequencyHopTableOption &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTableOption
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[df]"></a>TMR_SR_cmdGetGPIO</STRONG> (ARM, 396 bytes, Stack size 296 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetGPIO &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[e2]"></a>TMR_SR_cmdGetGPIODirection</STRONG> (ARM, 204 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetGPIODirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetGPIODirection &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[e3]"></a>TMR_SR_cmdGetHardwareVersion</STRONG> (ARM, 296 bytes, Stack size 288 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetHardwareVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetHardwareVersion &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNumber
</UL>

<P><STRONG><a name="[e4]"></a>TMR_SR_cmdGetMinimumFrequency</STRONG> (ARM, 36 bytes, Stack size 16 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetMinimumFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetMinimumFrequency &rArr; TMR_SR_cmdGetFrequencyHopTableOption &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTableOption
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[e6]"></a>TMR_SR_cmdGetPowerMode</STRONG> (ARM, 76 bytes, Stack size 272 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetPowerMode &rArr; TMR_SR_callSendCmd &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[e7]"></a>TMR_SR_cmdGetProtocolConfiguration</STRONG> (ARM, 1800 bytes, Stack size 312 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetProtocolConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetProtocolConfiguration &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_convertFromEBV
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[ea]"></a>TMR_SR_cmdGetProtocolList</STRONG> (ARM, 304 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetProtocolList))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetProtocolList &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[eb]"></a>TMR_SR_cmdGetQuantizationStep</STRONG> (ARM, 36 bytes, Stack size 16 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetQuantizationStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetQuantizationStep &rArr; TMR_SR_cmdGetFrequencyHopTableOption &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTableOption
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[ec]"></a>TMR_SR_cmdGetReadTxPower</STRONG> (ARM, 36 bytes, Stack size 16 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetReadTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetReadTxPower &rArr; TMR_SR_cmdGetReadWriteTxPower &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReadWriteTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[ee]"></a>TMR_SR_cmdGetReadTxPowerWithLimits</STRONG> (ARM, 232 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetReadTxPowerWithLimits))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetReadTxPowerWithLimits &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[ed]"></a>TMR_SR_cmdGetReadWriteTxPower</STRONG> (ARM, 188 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetReadWriteTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetReadWriteTxPower &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetWriteTxPower
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReadTxPower
</UL>

<P><STRONG><a name="[ef]"></a>TMR_SR_cmdGetReaderConfiguration</STRONG> (ARM, 576 bytes, Stack size 288 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetReaderConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetReaderConfiguration &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[f0]"></a>TMR_SR_cmdGetReaderStatistics</STRONG> (ARM, 680 bytes, Stack size 288 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetReaderStatistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetReaderStatistics &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[f1]"></a>TMR_SR_cmdGetReaderStats</STRONG> (ARM, 784 bytes, Stack size 304 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetReaderStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetReaderStats &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_convertToEBV
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_convertFromEBV
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseEBVdata
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_fillReaderStats
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[f5]"></a>TMR_SR_cmdGetReaderWriteTimeOut</STRONG> (ARM, 276 bytes, Stack size 288 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetReaderWriteTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetReaderWriteTimeOut &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[f6]"></a>TMR_SR_cmdGetRegion</STRONG> (ARM, 76 bytes, Stack size 272 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetRegion &rArr; TMR_SR_callSendCmd &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[f7]"></a>TMR_SR_cmdGetRegionConfiguration</STRONG> (ARM, 404 bytes, Stack size 288 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetRegionConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetRegionConfiguration &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[f8]"></a>TMR_SR_cmdGetTagsRemaining</STRONG> (ARM, 100 bytes, Stack size 272 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetTagsRemaining))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetTagsRemaining &rArr; TMR_SR_callSendCmd &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdMultipleProtocolSearch
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[f9]"></a>TMR_SR_cmdGetTemperature</STRONG> (ARM, 84 bytes, Stack size 272 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetTemperature &rArr; TMR_SR_callSendCmd &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[fa]"></a>TMR_SR_cmdGetUserMode</STRONG> (ARM, 76 bytes, Stack size 272 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetUserMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetUserMode &rArr; TMR_SR_callSendCmd &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[fb]"></a>TMR_SR_cmdGetWriteTxPower</STRONG> (ARM, 36 bytes, Stack size 16 bytes, serial_reader_l3.o(i.TMR_SR_cmdGetWriteTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetWriteTxPower &rArr; TMR_SR_cmdGetReadWriteTxPower &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReadWriteTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[fc]"></a>TMR_SR_cmdMultipleProtocolSearch</STRONG> (ARM, 408 bytes, Stack size 312 bytes, serial_reader_l3.o(i.TMR_SR_cmdMultipleProtocolSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdMultipleProtocolSearch &rArr; TMR_SR_cmdGetTagsRemaining &rArr; TMR_SR_callSendCmd &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetTagsRemaining
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupMultipleProtocolSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[ff]"></a>TMR_SR_cmdReadTagMultiple</STRONG> (ARM, 392 bytes, Stack size 312 bytes, serial_reader_l3.o(i.TMR_SR_cmdReadTagMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdReadTagMultiple &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultiple
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[101]"></a>TMR_SR_cmdResetReaderStatistics</STRONG> (ARM, 244 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdResetReaderStatistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdResetReaderStatistics &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[102]"></a>TMR_SR_cmdResetReaderStats</STRONG> (ARM, 348 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdResetReaderStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdResetReaderStats &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[103]"></a>TMR_SR_cmdSetAntennaPortPowersAndSettlingTime</STRONG> (ARM, 580 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetAntennaPortPowersAndSettlingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetAntennaPortPowersAndSettlingTime &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPortValues
</UL>

<P><STRONG><a name="[104]"></a>TMR_SR_cmdSetAntennaSearchList</STRONG> (ARM, 328 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetAntennaSearchList))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetAntennaSearchList &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaList
</UL>

<P><STRONG><a name="[105]"></a>TMR_SR_cmdSetBaudRate</STRONG> (ARM, 220 bytes, Stack size 272 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetBaudRate &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[106]"></a>TMR_SR_cmdSetFrequencyHopTable</STRONG> (ARM, 264 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetFrequencyHopTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetFrequencyHopTable &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[107]"></a>TMR_SR_cmdSetFrequencyHopTableOption</STRONG> (ARM, 292 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetFrequencyHopTableOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetFrequencyHopTableOption &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[108]"></a>TMR_SR_cmdSetGPIODirection</STRONG> (ARM, 320 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetGPIODirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetGPIODirection &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[109]"></a>TMR_SR_cmdSetMode</STRONG> (ARM, 152 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetMode &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetPowerMode
</UL>

<P><STRONG><a name="[10c]"></a>TMR_SR_cmdSetPowerMode</STRONG> (ARM, 36 bytes, Stack size 16 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetPowerMode &rArr; TMR_SR_cmdSetMode &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[10d]"></a>TMR_SR_cmdSetProtocol</STRONG> (ARM, 176 bytes, Stack size 272 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetProtocol &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProtocol
</UL>

<P><STRONG><a name="[10e]"></a>TMR_SR_cmdSetProtocolConfiguration</STRONG> (ARM, 2652 bytes, Stack size 304 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetProtocolConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetProtocolConfiguration &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_convertToEBV
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[10f]"></a>TMR_SR_cmdSetProtocolLicenseKey</STRONG> (ARM, 304 bytes, Stack size 288 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetProtocolLicenseKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetProtocolLicenseKey &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[110]"></a>TMR_SR_cmdSetProtocolList</STRONG> (ARM, 316 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetProtocolList))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetProtocolList &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[111]"></a>TMR_SR_cmdSetReadTxPower</STRONG> (ARM, 36 bytes, Stack size 16 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetReadTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetReadTxPower &rArr; TMR_SR_cmdSetReadWriteTxPower &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReadWriteTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[112]"></a>TMR_SR_cmdSetReadWriteTxPower</STRONG> (ARM, 192 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetReadWriteTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetReadWriteTxPower &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetWriteTxPower
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReadTxPower
</UL>

<P><STRONG><a name="[113]"></a>TMR_SR_cmdSetReaderConfiguration</STRONG> (ARM, 764 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetReaderConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetReaderConfiguration &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[114]"></a>TMR_SR_cmdSetReaderWriteTimeOut</STRONG> (ARM, 348 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetReaderWriteTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetReaderWriteTimeOut &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[115]"></a>TMR_SR_cmdSetRegion</STRONG> (ARM, 812 bytes, Stack size 272 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetRegion &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[116]"></a>TMR_SR_cmdSetRegionDwellTime</STRONG> (ARM, 352 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetRegionDwellTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetRegionDwellTime &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[117]"></a>TMR_SR_cmdSetRegionDwellTimeEnable</STRONG> (ARM, 44 bytes, Stack size 16 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetRegionDwellTimeEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetRegionDwellTimeEnable &rArr; TMR_SR_cmdSetRegionDwellTimeLbtEnable &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionDwellTimeLbtEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[118]"></a>TMR_SR_cmdSetRegionDwellTimeLbtEnable</STRONG> (ARM, 296 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetRegionDwellTimeLbtEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetRegionDwellTimeLbtEnable &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionLbt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionDwellTimeEnable
</UL>

<P><STRONG><a name="[119]"></a>TMR_SR_cmdSetRegionLbt</STRONG> (ARM, 44 bytes, Stack size 16 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetRegionLbt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetRegionLbt &rArr; TMR_SR_cmdSetRegionDwellTimeLbtEnable &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionDwellTimeLbtEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[11a]"></a>TMR_SR_cmdSetRegionLbtThreshold</STRONG> (ARM, 320 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetRegionLbtThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetRegionLbtThreshold &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[11b]"></a>TMR_SR_cmdSetTxRxPorts</STRONG> (ARM, 220 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetTxRxPorts))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetTxRxPorts &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[11c]"></a>TMR_SR_cmdSetUserMode</STRONG> (ARM, 36 bytes, Stack size 16 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetUserMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetUserMode &rArr; TMR_SR_cmdSetMode &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[11d]"></a>TMR_SR_cmdSetUserProfile</STRONG> (ARM, 1184 bytes, Stack size 768 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetUserProfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 3408 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetUserProfile &rArr; prepForSearch &rArr; setAntennaReadTimeList &rArr; TMR_SR_cmdSetPerAntennaTime &rArr; initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetRegion
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetCurrentProtocol
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareAntennas
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getVersion
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_RP_init_simple
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupMultipleProtocolSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[121]"></a>TMR_SR_cmdSetWriteTxPower</STRONG> (ARM, 36 bytes, Stack size 16 bytes, serial_reader_l3.o(i.TMR_SR_cmdSetWriteTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetWriteTxPower &rArr; TMR_SR_cmdSetReadWriteTxPower &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReadWriteTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[1d]"></a>TMR_SR_cmdStopReading</STRONG> (ARM, 264 bytes, Stack size 272 bytes, serial_reader_l3.o(i.TMR_SR_cmdStopReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = TMR_SR_cmdStopReading &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_reader.o(i.TMR_SR_SerialReader_init)
</UL>
<P><STRONG><a name="[122]"></a>TMR_SR_cmdVersion</STRONG> (ARM, 156 bytes, Stack size 280 bytes, serial_reader_l3.o(i.TMR_SR_cmdVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdVersion &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillVersionInfo
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getVersion
</UL>

<P><STRONG><a name="[70]"></a>TMR_SR_connect</STRONG> (ARM, 244 bytes, Stack size 24 bytes, serial_reader.o(i.TMR_SR_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = TMR_SR_connect &rArr; TMR_SR_getVersion &rArr; TMR_SR_cmdVersion &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkForAvailableFeatures
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getVersion
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_boot
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigInit
</UL>

<P><STRONG><a name="[e9]"></a>TMR_SR_convertFromEBV</STRONG> (ARM, 740 bytes, Stack size 40 bytes, tm_reader.o(i.TMR_SR_convertFromEBV))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMR_SR_convertFromEBV
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStats
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetProtocolConfiguration
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_fillReaderStats
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataOnly
</UL>

<P><STRONG><a name="[f2]"></a>TMR_SR_convertToEBV</STRONG> (ARM, 812 bytes, Stack size 24 bytes, tm_reader.o(i.TMR_SR_convertToEBV))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMR_SR_convertToEBV
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolConfiguration
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStats
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>

<P><STRONG><a name="[125]"></a>TMR_SR_executeEmbeddedRead</STRONG> (ARM, 1100 bytes, Stack size 320 bytes, serial_reader_l3.o(i.TMR_SR_executeEmbeddedRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = TMR_SR_executeEmbeddedRead &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[a4]"></a>TMR_SR_getNextTag</STRONG> (ARM, 660 bytes, Stack size 40 bytes, serial_reader.o(i.TMR_SR_getNextTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680 + Unknown Stack Size
<LI>Call Chain = TMR_SR_getNextTag &rArr; TMR_SR_cmdClearTagBuffer &rArr; TMR_SR_callSendCmd &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_postprocessReaderSpecificMetadata
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataFromMessage
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdClearTagBuffer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>

<P><STRONG><a name="[120]"></a>TMR_SR_getVersion</STRONG> (ARM, 248 bytes, Stack size 24 bytes, serial_reader.o(i.TMR_SR_getVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624 + Unknown Stack Size
<LI>Call Chain = TMR_SR_getVersion &rArr; TMR_SR_cmdVersion &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_connect
</UL>

<P><STRONG><a name="[a3]"></a>TMR_SR_hasMoreTags</STRONG> (ARM, 996 bytes, Stack size 40 bytes, serial_reader.o(i.TMR_SR_hasMoreTags))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = TMR_SR_hasMoreTags &rArr; TMR_SR_cmdStopReading &rArr; TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdStopReading
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>

<P><STRONG><a name="[cb]"></a>TMR_SR_msgAddAccessPassword</STRONG> (ARM, 144 bytes, Stack size 24 bytes, serial_reader_l3.o(i.TMR_SR_msgAddAccessPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TMR_SR_msgAddAccessPassword &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[cc]"></a>TMR_SR_msgAddExtendedParams</STRONG> (ARM, 204 bytes, Stack size 24 bytes, serial_reader_l3.o(i.TMR_SR_msgAddExtendedParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TMR_SR_msgAddExtendedParams &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[c7]"></a>TMR_SR_msgAddGEN2BlockErase</STRONG> (ARM, 460 bytes, Stack size 56 bytes, serial_reader_l3.o(i.TMR_SR_msgAddGEN2BlockErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TMR_SR_msgAddGEN2BlockErase &rArr; filterbytes &rArr;  filterbytes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdFrameHeader
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[c6]"></a>TMR_SR_msgAddGEN2BlockPermaLock</STRONG> (ARM, 800 bytes, Stack size 56 bytes, serial_reader_l3.o(i.TMR_SR_msgAddGEN2BlockPermaLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TMR_SR_msgAddGEN2BlockPermaLock &rArr; filterbytes &rArr;  filterbytes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[c5]"></a>TMR_SR_msgAddGEN2BlockWrite</STRONG> (ARM, 852 bytes, Stack size 56 bytes, serial_reader_l3.o(i.TMR_SR_msgAddGEN2BlockWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TMR_SR_msgAddGEN2BlockWrite &rArr; filterbytes &rArr;  filterbytes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[c1]"></a>TMR_SR_msgAddGEN2DataRead</STRONG> (ARM, 408 bytes, Stack size 40 bytes, serial_reader_l3.o(i.TMR_SR_msgAddGEN2DataRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TMR_SR_msgAddGEN2DataRead &rArr; TMR_SR_cmdFrameHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdFrameHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[c2]"></a>TMR_SR_msgAddGEN2DataWrite</STRONG> (ARM, 480 bytes, Stack size 24 bytes, serial_reader_l3.o(i.TMR_SR_msgAddGEN2DataWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMR_SR_msgAddGEN2DataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[c4]"></a>TMR_SR_msgAddGEN2KillTag</STRONG> (ARM, 280 bytes, Stack size 24 bytes, serial_reader_l3.o(i.TMR_SR_msgAddGEN2KillTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMR_SR_msgAddGEN2KillTag &rArr; TMR_SR_cmdFrameHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdFrameHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[c3]"></a>TMR_SR_msgAddGEN2LockTag</STRONG> (ARM, 388 bytes, Stack size 32 bytes, serial_reader_l3.o(i.TMR_SR_msgAddGEN2LockTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TMR_SR_msgAddGEN2LockTag &rArr; TMR_SR_cmdFrameHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdFrameHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[c0]"></a>TMR_SR_msgAddGEN2WriteTagEPC</STRONG> (ARM, 264 bytes, Stack size 24 bytes, serial_reader_l3.o(i.TMR_SR_msgAddGEN2WriteTagEPC))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TMR_SR_msgAddGEN2WriteTagEPC &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[ca]"></a>TMR_SR_msgAddReadMemory</STRONG> (ARM, 568 bytes, Stack size 24 bytes, serial_reader_l3.o(i.TMR_SR_msgAddReadMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMR_SR_msgAddReadMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[ce]"></a>TMR_SR_msgAddWriteMemory</STRONG> (ARM, 432 bytes, Stack size 16 bytes, serial_reader_l3.o(i.TMR_SR_msgAddWriteMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_SR_msgAddWriteMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[fd]"></a>TMR_SR_msgSetupMultipleProtocolSearch</STRONG> (ARM, 1656 bytes, Stack size 96 bytes, serial_reader_l3.o(i.TMR_SR_msgSetupMultipleProtocolSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = TMR_SR_msgSetupMultipleProtocolSearch &rArr; TMR_SR_addTagOp &rArr;  TMR_SR_addTagOp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultipleWithMetadata
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdMultipleProtocolSearch
</UL>

<P><STRONG><a name="[100]"></a>TMR_SR_msgSetupReadTagMultiple</STRONG> (ARM, 80 bytes, Stack size 56 bytes, serial_reader_l3.o(i.TMR_SR_msgSetupReadTagMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TMR_SR_msgSetupReadTagMultiple &rArr; TMR_SR_msgSetupReadTagMultipleWithMetadata &rArr; filterbytes &rArr;  filterbytes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultipleWithMetadata
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdReadTagMultiple
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepEmbReadTagMultiple
</UL>

<P><STRONG><a name="[12b]"></a>TMR_SR_msgSetupReadTagMultipleWithMetadata</STRONG> (ARM, 1488 bytes, Stack size 64 bytes, serial_reader_l3.o(i.TMR_SR_msgSetupReadTagMultipleWithMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TMR_SR_msgSetupReadTagMultipleWithMetadata &rArr; filterbytes &rArr;  filterbytes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramGet
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultiple
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupMultipleProtocolSearch
</UL>

<P><STRONG><a name="[126]"></a>TMR_SR_parseMetadataFromMessage</STRONG> (ARM, 556 bytes, Stack size 40 bytes, serial_reader_l3.o(i.TMR_SR_parseMetadataFromMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TMR_SR_parseMetadataFromMessage &rArr; TMR_SR_parseMetadataOnly &rArr; TMR_SR_convertFromEBV
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_u8s_per_bits
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataOnly
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
</UL>

<P><STRONG><a name="[137]"></a>TMR_SR_parseMetadataOnly</STRONG> (ARM, 1192 bytes, Stack size 48 bytes, serial_reader_l3.o(i.TMR_SR_parseMetadataOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TMR_SR_parseMetadataOnly &rArr; TMR_SR_convertFromEBV
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_u8s_per_bits
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_convertFromEBV
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseEBVdata
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractGen2MemoryBankValues
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataFromMessage
</UL>

<P><STRONG><a name="[127]"></a>TMR_SR_postprocessReaderSpecificMetadata</STRONG> (ARM, 404 bytes, Stack size 40 bytes, serial_reader_l3.o(i.TMR_SR_postprocessReaderSpecificMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TMR_SR_postprocessReaderSpecificMetadata &rArr; TMR_SR_antennaDecoding
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_antennaDecoding
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
</UL>

<P><STRONG><a name="[13b]"></a>TMR_SR_read</STRONG> (ARM, 144 bytes, Stack size 24 bytes, serial_reader.o(i.TMR_SR_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 3000 + Unknown Stack Size
<LI>Call Chain = TMR_SR_read &rArr; TMR_SR_read_internal &rArr; prepForSearch &rArr; setAntennaReadTimeList &rArr; TMR_SR_cmdSetPerAntennaTime &rArr; initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_startReading
</UL>

<P><STRONG><a name="[128]"></a>TMR_SR_receiveMessage</STRONG> (ARM, 1080 bytes, Stack size 88 bytes, serial_reader_l3.o(i.TMR_SR_receiveMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = TMR_SR_receiveMessage &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_crc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR__notifyTransportListeners
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>

<P><STRONG><a name="[141]"></a>TMR_SR_send</STRONG> (ARM, 36 bytes, Stack size 16 bytes, serial_reader_l3.o(i.TMR_SR_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + Unknown Stack Size
<LI>Call Chain = TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>

<P><STRONG><a name="[142]"></a>TMR_SR_sendBytes</STRONG> (ARM, 104 bytes, Stack size 32 bytes, serial_reader_l3.o(i.TMR_SR_sendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR__notifyTransportListeners
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_flush
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>

<P><STRONG><a name="[d2]"></a>TMR_SR_sendCmd</STRONG> (ARM, 44 bytes, Stack size 16 bytes, serial_reader_l3.o(i.TMR_SR_sendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetTxRxPorts
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionLbtThreshold
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionDwellTime
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegion
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReaderWriteTimeOut
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReaderConfiguration
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolList
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolLicenseKey
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolConfiguration
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocol
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetGPIODirection
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetFrequencyHopTableOption
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetFrequencyHopTable
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetBaudRate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetAntennaSearchList
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetAntennaPortPowersAndSettlingTime
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetRegionConfiguration
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderWriteTimeOut
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderConfiguration
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReadTxPowerWithLimits
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetProtocolList
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetProtocolConfiguration
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetHardwareVersion
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetGPIODirection
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAntennaReturnLoss
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAntennaPortPowersAndSettlingTime
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdAntennaDetect
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetPerAntennaTime
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetPerAntennaTime
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionDwellTimeLbtEnable
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReadWriteTxPower
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetMode
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReadWriteTxPower
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTableOption
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_callSendCmd
</UL>

<P><STRONG><a name="[fe]"></a>TMR_SR_sendMessage</STRONG> (ARM, 368 bytes, Stack size 40 bytes, serial_reader_l3.o(i.TMR_SR_sendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TMR_SR_sendMessage &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_crc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeEmbeddedRead
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdStopReading
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdReadTagMultiple
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdMultipleProtocolSearch
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>

<P><STRONG><a name="[d4]"></a>TMR_SR_sendTimeout</STRONG> (ARM, 292 bytes, Stack size 904 bytes, serial_reader_l3.o(i.TMR_SR_sendTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_getNextTag
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_read_listeners
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeEmbeddedRead
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdVersion
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdResetReaderStats
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdResetReaderStatistics
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdReadTagMultiple
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdMultipleProtocolSearch
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStats
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStatistics
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetGPIO
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBootFirmware
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_send
</UL>

<P><STRONG><a name="[13f]"></a>TMR__notifyTransportListeners</STRONG> (ARM, 88 bytes, Stack size 32 bytes, tm_reader.o(i.TMR__notifyTransportListeners))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMR__notifyTransportListeners
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendBytes
</UL>

<P><STRONG><a name="[93]"></a>TMR_create</STRONG> (ARM, 424 bytes, Stack size 96 bytes, tm_reader.o(i.TMR_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = TMR_create &rArr; TMR_SR_SerialReader_init &rArr; TMR_reader_init_internal &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_SerialReader_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp (via Veneer)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok (via Veneer)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_strcpy
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_initSerialTransportTable
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReaderManagerInit
</UL>

<P><STRONG><a name="[f4]"></a>TMR_fillReaderStats</STRONG> (ARM, 1144 bytes, Stack size 48 bytes, serial_reader_l3.o(i.TMR_fillReaderStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TMR_fillReaderStats &rArr; TMR_SR_convertFromEBV
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_convertFromEBV
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseEBVdata
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStats
</UL>

<P><STRONG><a name="[9f]"></a>TMR_flush</STRONG> (ARM, 172 bytes, Stack size 32 bytes, serial_reader_l3.o(i.TMR_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TMR_flush &rArr; TMR_SR_sendBytes &rArr; TMR__notifyTransportListeners
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
</UL>

<P><STRONG><a name="[132]"></a>TMR_hexDottedQuad</STRONG> (ARM, 84 bytes, Stack size 0 bytes, hex_bytes.o(i.TMR_hexDottedQuad))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHardwareInfo
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[a7]"></a>TMR_paramGet</STRONG> (ARM, 176 bytes, Stack size 24 bytes, tm_reader.o(i.TMR_paramGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMR_paramGet &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramProbe
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_startReading
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultipleWithMetadata
</UL>

<P><STRONG><a name="[133]"></a>TMR_paramProbe</STRONG> (ARM, 192 bytes, Stack size 48 bytes, tm_reader.o(i.TMR_paramProbe))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TMR_paramProbe &rArr; TMR_paramGet &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramGet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[71]"></a>TMR_paramSet</STRONG> (ARM, 228 bytes, Stack size 24 bytes, tm_reader.o(i.TMR_paramSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMR_paramSet
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigInit
</UL>

<P><STRONG><a name="[bd]"></a>TMR_reader_init_internal</STRONG> (ARM, 216 bytes, Stack size 272 bytes, tm_reader.o(i.TMR_reader_init_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = TMR_reader_init_internal &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_RP_init_simple
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_SerialReader_init
</UL>

<P><STRONG><a name="[a2]"></a>TMR_startReading</STRONG> (ARM, 96 bytes, Stack size 16 bytes, tm_reader_async.o(i.TMR_startReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 3016 + Unknown Stack Size
<LI>Call Chain = TMR_startReading &rArr; TMR_SR_read &rArr; TMR_SR_read_internal &rArr; prepForSearch &rArr; setAntennaReadTimeList &rArr; TMR_SR_cmdSetPerAntennaTime &rArr; initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramGet
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
</UL>

<P><STRONG><a name="[9e]"></a>TMR_stopReading</STRONG> (ARM, 164 bytes, Stack size 8 bytes, tm_reader_async.o(i.TMR_stopReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_stopReading
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
</UL>

<P><STRONG><a name="[12d]"></a>TMR_stringCopy</STRONG> (ARM, 88 bytes, Stack size 16 bytes, tmr_utils.o(i.TMR_stringCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TMR_stringCopy &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNumber
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHardwareInfo
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_initSerialTransportTable
</UL>

<P><STRONG><a name="[163]"></a>UART0_Init</STRONG> (ARM, 60 bytes, Stack size 0 bytes, uart0.o(i.UART0_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[161]"></a>UART0_sendchar</STRONG> (ARM, 36 bytes, Stack size 0 bytes, uart0.o(i.UART0_sendchar))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[148]"></a>UART1_Init</STRONG> (ARM, 108 bytes, Stack size 8 bytes, uart1.o(i.UART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_Init &rArr; TIMER_SOFTWARE_configure_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_request_timer
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_configure_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>UART1_flush</STRONG> (ARM, 56 bytes, Stack size 8 bytes, uart1.o(i.UART1_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufFlush
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_send_reveice_PING
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_flush
</UL>

<P><STRONG><a name="[a9]"></a>UART1_get_CommErrors</STRONG> (ARM, 12 bytes, Stack size 0 bytes, uart1.o(i.UART1_get_CommErrors))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
</UL>

<P><STRONG><a name="[1b]"></a>UART1_irq</STRONG> (ARM, 64 bytes, Stack size 32 bytes, isr_manager.o(i.UART1_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART1_irq &rArr; RingBufWriteOne
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufWriteOne
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isr_manager.o(i.InitInterrupt)
</UL>
<P><STRONG><a name="[14c]"></a>UART1_receivebuffer</STRONG> (ARM, 424 bytes, Stack size 40 bytes, uart1.o(i.UART1_receivebuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = UART1_receivebuffer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_communication_errors
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_stop_timer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_start_timer
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_reset_timer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_interrupt_pending
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_configure_timer
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_clear_interrupt
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufUsed
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufReadOne
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufRead
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_receiveBytes
</UL>

<P><STRONG><a name="[14f]"></a>UART1_send_reveice_PING</STRONG> (ARM, 356 bytes, Stack size 56 bytes, uart1.o(i.UART1_send_reveice_PING))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = UART1_send_reveice_PING &rArr; UART1_sendbuffer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_sendbuffer
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_flush
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_communication_errors
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_start_timer
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_reset_timer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_interrupt_pending
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_clear_interrupt
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufReadOne
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufEmpty
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reader_recovery
</UL>

<P><STRONG><a name="[150]"></a>UART1_sendbuffer</STRONG> (ARM, 312 bytes, Stack size 32 bytes, uart1.o(i.UART1_sendbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = UART1_sendbuffer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_sendchar
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_start_timer
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_reset_timer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_is_Running
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_interrupt_pending
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_configure_timer
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_clear_interrupt
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_send_reveice_PING
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_sendBytes
</UL>

<P><STRONG><a name="[151]"></a>UART1_sendchar</STRONG> (ARM, 36 bytes, Stack size 0 bytes, uart1.o(i.UART1_sendchar))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_sendbuffer
</UL>

<P><STRONG><a name="[152]"></a>Wait_For_HIGH_Transition</STRONG> (ARM, 28 bytes, Stack size 8 bytes, wifi_utils.o(i.Wait_For_HIGH_Transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Wait_For_HIGH_Transition &rArr; Wait_for_transition &rArr; TIMER_SOFTWARE_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_for_transition
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiManager_Init
</UL>

<P><STRONG><a name="[bb]"></a>Wdg_FeedSequence</STRONG> (ARM, 36 bytes, Stack size 0 bytes, watchdog.o(i.Wdg_FeedSequence))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdg_Start
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_irq
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_irq
</UL>

<P><STRONG><a name="[8e]"></a>Wdg_Start</STRONG> (ARM, 88 bytes, Stack size 4 bytes, watchdog.o(i.Wdg_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Wdg_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdg_FeedSequence
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_Mode_Manager_Init
</UL>

<P><STRONG><a name="[ba]"></a>Wdg_isFeedRequested</STRONG> (ARM, 12 bytes, Stack size 0 bytes, watchdog.o(i.Wdg_isFeedRequested))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_irq
</UL>

<P><STRONG><a name="[153]"></a>WifiManager_Init</STRONG> (ARM, 404 bytes, Stack size 136 bytes, wifi_manager.o(i.WifiManager_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624 + Unknown Stack Size
<LI>Call Chain = WifiManager_Init &rArr; Send_ESP_Command &rArr; Write_ESP_Data &rArr; Get_Read_Write_Status &rArr; spi0_sendReceive_message
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_utils_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_HIGH_Transition
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ESP_Command
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ready_Status
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Module_Current_State
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiManager_Perform_HW_Reset
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_Set_StayAwake
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_Set_InitFlag
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Manager
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>WifiManager_Perform_HW_Reset</STRONG> (ARM, 96 bytes, Stack size 8 bytes, wifi_manager.o(i.WifiManager_Perform_HW_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WifiManager_Perform_HW_Reset &rArr; TIMER_SOFTWARE_Wait &rArr; TIMER_SOFTWARE_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiManager_Init
</UL>

<P><STRONG><a name="[89]"></a>Wifi_GET_is_ClientConnected</STRONG> (ARM, 40 bytes, Stack size 24 bytes, wifi_manager.o(i.Wifi_GET_is_ClientConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Wifi_GET_is_ClientConnected &rArr; Get_Module_Current_State
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Module_Current_State
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_decode_requests
</UL>

<P><STRONG><a name="[9a]"></a>Wifi_GET_is_Wifi_Connected_status</STRONG> (ARM, 40 bytes, Stack size 24 bytes, wifi_manager.o(i.Wifi_GET_is_Wifi_Connected_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Wifi_GET_is_Wifi_Connected_status &rArr; Get_Module_Current_State
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Module_Current_State
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
</UL>

<P><STRONG><a name="[a6]"></a>Wifi_GET_passtrough_response</STRONG> (ARM, 208 bytes, Stack size 224 bytes, wifi_manager.o(i.Wifi_GET_passtrough_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Wifi_GET_passtrough_response &rArr; isPassthroughResponseValid &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Wifi_Response_Ready_State
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Wifi_Response_Ready_State
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Wifi_Response_Passtrough
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isPassthroughResponseValid
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
</UL>

<P><STRONG><a name="[159]"></a>Wifi_Manager</STRONG> (ARM, 1908 bytes, Stack size 336 bytes, wifi_manager.o(i.Wifi_Manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 5584 + Unknown Stack Size
<LI>Call Chain = Wifi_Manager &rArr; Check_for_WiFi_Update &rArr; Read_ESP_Data &rArr; Get_Read_Write_Status &rArr; spi0_sendReceive_message
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiManager_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Passthrough_Mode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Module_Current_State
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ESP_Command
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Wifi_Response_Ready_State
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Wifi_Response_Passtrough
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Module_Current_State
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HandsakePin_Status
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_for_WiFi_Update
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_WIFI_Module_HW
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GET_internal_failure_status
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_Set_StayAwake
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_Set_InitFlag
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_Get_Functionality_Init_State
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>Wifi_SET_Command_Request</STRONG> (ARM, 148 bytes, Stack size 24 bytes, wifi_manager.o(i.Wifi_SET_Command_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Wifi_SET_Command_Request
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_validate_tag_criteria_cmd
</UL>

<P><STRONG><a name="[4c]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r1))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[44]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[4d]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3e]"></a>_sys_exit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[123]"></a>checkForAvailableFeatures</STRONG> (ARM, 132 bytes, Stack size 20 bytes, tm_reader.o(i.checkForAvailableFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = checkForAvailableFeatures
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;versionCompare
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAddrByteExtEnabledVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_connect
</UL>

<P><STRONG><a name="[11e]"></a>compareAntennas</STRONG> (ARM, 280 bytes, Stack size 20 bytes, serial_reader.o(i.compareAntennas))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = compareAntennas
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
</UL>

<P><STRONG><a name="[8a]"></a>compute_crc</STRONG> (ARM, 116 bytes, Stack size 8 bytes, crc.o(i.compute_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = compute_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_command_status
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_check_CRC_after_RX_finish
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_irq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>

<P><STRONG><a name="[139]"></a>extractGen2MemoryBankValues</STRONG> (ARM, 284 bytes, Stack size 32 bytes, serial_reader_l3.o(i.extractGen2MemoryBankValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = extractGen2MemoryBankValues &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataOnly
</UL>

<P><STRONG><a name="[5e]"></a>ferror</STRONG> (ARM, 12 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file (via Veneer)
</UL>

<P><STRONG><a name="[16b]"></a>fillStaticTxRxMapData</STRONG> (ARM, 136 bytes, Stack size 8 bytes, serial_reader.o(i.fillStaticTxRxMapData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fillStaticTxRxMapData
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTxRxMapData
</UL>

<P><STRONG><a name="[d5]"></a>fillVersionInfo</STRONG> (ARM, 268 bytes, Stack size 4 bytes, serial_reader_l3.o(i.fillVersionInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fillVersionInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdVersion
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdBootFirmware
</UL>

<P><STRONG><a name="[17]"></a>fputc</STRONG> (ARM, 28 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_sendchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[15f]"></a>getAddrByteExtEnabledVersion</STRONG> (ARM, 80 bytes, Stack size 0 bytes, tm_reader.o(i.getAddrByteExtEnabledVersion))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkForAvailableFeatures
</UL>

<P><STRONG><a name="[c8]"></a>getReadExtParams</STRONG> (ARM, 748 bytes, Stack size 16 bytes, serial_reader.o(i.getReadExtParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getReadExtParams
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[cd]"></a>getWriteExtParams</STRONG> (ARM, 1120 bytes, Stack size 24 bytes, serial_reader.o(i.getWriteExtParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getWriteExtParams
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[7a]"></a>i2c_check_CRC_after_RX_finish</STRONG> (ARM, 80 bytes, Stack size 24 bytes, i2c.o(i.i2c_check_CRC_after_RX_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_check_CRC_after_RX_finish &rArr; compute_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_Manager
</UL>

<P><STRONG><a name="[78]"></a>i2c_get_RX_ready_status</STRONG> (ARM, 12 bytes, Stack size 0 bytes, i2c.o(i.i2c_get_RX_ready_status))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_Manager
</UL>

<P><STRONG><a name="[7d]"></a>i2c_get_command</STRONG> (ARM, 36 bytes, Stack size 0 bytes, i2c.o(i.i2c_get_command))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_Manager
</UL>

<P><STRONG><a name="[7f]"></a>i2c_get_request_stayAwake</STRONG> (ARM, 12 bytes, Stack size 0 bytes, i2c.o(i.i2c_get_request_stayAwake))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_Manager
</UL>

<P><STRONG><a name="[80]"></a>i2c_set_RX_ready_status</STRONG> (ARM, 12 bytes, Stack size 0 bytes, i2c.o(i.i2c_set_RX_ready_status))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_Manager
</UL>

<P><STRONG><a name="[7b]"></a>i2c_set_command_status</STRONG> (ARM, 52 bytes, Stack size 16 bytes, i2c.o(i.i2c_set_command_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_set_command_status &rArr; compute_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_Manager
</UL>

<P><STRONG><a name="[87]"></a>i2c_set_data_bytes</STRONG> (ARM, 36 bytes, Stack size 16 bytes, i2c.o(i.i2c_set_data_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_set_data_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_decode_requests
</UL>

<P><STRONG><a name="[7c]"></a>i2c_set_response_ready_status</STRONG> (ARM, 12 bytes, Stack size 0 bytes, i2c.o(i.i2c_set_response_ready_status))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_Manager
</UL>

<P><STRONG><a name="[10b]"></a>initTxRxMapFromPorts</STRONG> (ARM, 108 bytes, Stack size 144 bytes, serial_reader.o(i.initTxRxMapFromPorts))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784 + Unknown Stack Size
<LI>Call Chain = initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdAntennaDetect
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTxRxMapData
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPortValues
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPortValues
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetPerAntennaTime
</UL>

<P><STRONG><a name="[c9]"></a>isTagTypeFilterAvail</STRONG> (ARM, 116 bytes, Stack size 0 bytes, serial_reader.o(i.isTagTypeFilterAvail))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[14]"></a>main</STRONG> (ARM, 132 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 5584 + Unknown Stack Size
<LI>Call Chain = main &rArr; Wifi_Manager &rArr; Check_for_WiFi_Update &rArr; Read_ESP_Data &rArr; Get_Read_Write_Status &rArr; spi0_sendReceive_message
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Manager
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiManager_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_HW_Reset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReaderManagerInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_Mode_Manager_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitInterrupt
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_Manager_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_Manager
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[143]"></a>notify_read_listeners</STRONG> (ARM, 72 bytes, Stack size 16 bytes, tm_reader_async.o(i.notify_read_listeners))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = notify_read_listeners
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
</UL>

<P><STRONG><a name="[f3]"></a>parseEBVdata</STRONG> (ARM, 124 bytes, Stack size 12 bytes, serial_reader_l3.o(i.parseEBVdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = parseEBVdata
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStats
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_fillReaderStats
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataOnly
</UL>

<P><STRONG><a name="[11f]"></a>prepForSearch</STRONG> (ARM, 292 bytes, Stack size 24 bytes, serial_reader.o(i.prepForSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 2640 + Unknown Stack Size
<LI>Call Chain = prepForSearch &rArr; setAntennaReadTimeList &rArr; TMR_SR_cmdSetPerAntennaTime &rArr; initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateParams
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaReadTimeList
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTxRxMapFromPorts
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareAntennas
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaList
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[168]"></a>setAntennaReadTimeHelper</STRONG> (ARM, 696 bytes, Stack size 56 bytes, serial_reader.o(i.setAntennaReadTimeHelper))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = setAntennaReadTimeHelper &rArr;  setAntennaReadTimeHelper (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaReadTimeHelper
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaReadTimeList
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaReadTimeHelper
</UL>

<P><STRONG><a name="[167]"></a>setAntennaReadTimeList</STRONG> (ARM, 132 bytes, Stack size 544 bytes, serial_reader.o(i.setAntennaReadTimeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 2616 + Unknown Stack Size
<LI>Call Chain = setAntennaReadTimeList &rArr; TMR_SR_cmdSetPerAntennaTime &rArr; initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaReadTimeHelper
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetPerAntennaTime
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
</UL>

<P><STRONG><a name="[75]"></a>spi0_sendReceive_message</STRONG> (ARM, 168 bytes, Stack size 16 bytes, spi.o(i.spi0_sendReceive_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi0_sendReceive_message
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_set_slave_select
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ESP_Data
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Write_EOF
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Read_EOF
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ESP_Data
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_ESP_Send_Permission
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Read_Write_Status
</UL>

<P><STRONG><a name="[1c]"></a>timer1_irq</STRONG> (ARM, 76 bytes, Stack size 24 bytes, timer.o(i.timer1_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer1_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdg_FeedSequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isr_manager.o(i.InitInterrupt)
</UL>
<P><STRONG><a name="[13d]"></a>tm_gettime_consistent</STRONG> (ARM, 68 bytes, Stack size 16 bytes, tmr_utils.o(i.tm_gettime_consistent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tm_gettime_consistent
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime_low
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_gettime_high
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
</UL>

<P><STRONG><a name="[e8]"></a>tm_memcpy</STRONG> (ARM, 52 bytes, Stack size 4 bytes, tmr_utils.o(i.tm_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tm_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_stringCopy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataFromMessage
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2WriteTagEPC
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddExtendedParams
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddAccessPassword
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeEmbeddedRead
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolLicenseKey
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetProtocolConfiguration
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_hasMoreTags
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractGen2MemoryBankValues
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendTimeout
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataOnly
</UL>

<P><STRONG><a name="[146]"></a>tm_strcpy</STRONG> (ARM, 36 bytes, Stack size 0 bytes, tmr_utils.o(i.tm_strcpy))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[138]"></a>tm_u8s_per_bits</STRONG> (ARM, 36 bytes, Stack size 0 bytes, tmr_utils.o(i.tm_u8s_per_bits))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataFromMessage
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_parseMetadataOnly
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>

<P><STRONG><a name="[140]"></a>tmr_gettime</STRONG> (ARM, 12 bytes, Stack size 0 bytes, osdep_dummy.o(i.tmr_gettime))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_receiveMessage
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendMessage
</UL>

<P><STRONG><a name="[169]"></a>tmr_gettime_high</STRONG> (ARM, 8 bytes, Stack size 0 bytes, osdep_dummy.o(i.tmr_gettime_high))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_gettime_consistent
</UL>

<P><STRONG><a name="[16a]"></a>tmr_gettime_low</STRONG> (ARM, 8 bytes, Stack size 0 bytes, osdep_dummy.o(i.tmr_gettime_low))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_gettime_consistent
</UL>

<P><STRONG><a name="[12f]"></a>updateTxRxMapData</STRONG> (ARM, 168 bytes, Stack size 24 bytes, serial_reader.o(i.updateTxRxMapData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = updateTxRxMapData &rArr; fillStaticTxRxMapData
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillStaticTxRxMapData
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTxRxMapFromPorts
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[166]"></a>validateParams</STRONG> (ARM, 376 bytes, Stack size 12 bytes, serial_reader.o(i.validateParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = validateParams
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
</UL>

<P><STRONG><a name="[136]"></a>validateReadPlan</STRONG> (ARM, 92 bytes, Stack size 8 bytes, tm_reader.o(i.validateReadPlan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validateReadPlan
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[160]"></a>versionCompare</STRONG> (ARM, 204 bytes, Stack size 0 bytes, tm_reader.o(i.versionCompare))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkForAvailableFeatures
</UL>

<P><STRONG><a name="[16c]"></a>wifi_handsake_init</STRONG> (ARM, 60 bytes, Stack size 0 bytes, wifi_utils.o(i.wifi_handsake_init))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_utils_Init
</UL>

<P><STRONG><a name="[19]"></a>wifi_handsake_irq</STRONG> (ARM, 72 bytes, Stack size 8 bytes, wifi_utils.o(i.wifi_handsake_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_handsake_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isr_manager.o(i.InitInterrupt)
</UL>
<P><STRONG><a name="[154]"></a>wifi_utils_Init</STRONG> (ARM, 100 bytes, Stack size 8 bytes, wifi_utils.o(i.wifi_utils_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wifi_utils_Init &rArr; TIMER_SOFTWARE_configure_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_reset_timer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_request_timer
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_configure_timer
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_handsake_init
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiManager_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = FIQ_Handler &rArr; TIMER_irq &rArr; TIMER_SOFTWARE_ModX
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>UpdateIndexAtomic</STRONG> (ARM, 44 bytes, Stack size 0 bytes, ringbuf.o(i.UpdateIndexAtomic))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufWriteOne
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufReadOne
</UL>

<P><STRONG><a name="[14e]"></a>check_communication_errors</STRONG> (ARM, 60 bytes, Stack size 0 bytes, uart1.o(i.check_communication_errors))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_send_reveice_PING
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_receivebuffer
</UL>

<P><STRONG><a name="[b2]"></a>SPI0_set_slave_select</STRONG> (ARM, 64 bytes, Stack size 0 bytes, spi.o(i.SPI0_set_slave_select))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_sendReceive_message
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_init
</UL>

<P><STRONG><a name="[e5]"></a>TMR_SR_cmdGetPerAntennaTime</STRONG> (ARM, 280 bytes, Stack size 280 bytes, serial_reader.o(i.TMR_SR_cmdGetPerAntennaTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdGetPerAntennaTime &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[10a]"></a>TMR_SR_cmdSetPerAntennaTime</STRONG> (ARM, 580 bytes, Stack size 288 bytes, serial_reader.o(i.TMR_SR_cmdSetPerAntennaTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 2072 + Unknown Stack Size
<LI>Call Chain = TMR_SR_cmdSetPerAntennaTime &rArr; initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_sendCmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTxRxMapFromPorts
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAntennaReadTimeList
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[1f]"></a>TMR_SR_paramGet</STRONG> (ARM, 5868 bytes, Stack size 248 bytes, serial_reader.o(i.TMR_SR_paramGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 2584 + Unknown Stack Size
<LI>Call Chain = TMR_SR_paramGet &rArr; getPortValues &rArr; initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_stringCopy
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetWriteTxPower
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetUserMode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetTemperature
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetRegionConfiguration
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetRegion
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderWriteTimeOut
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStats
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderStatistics
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderConfiguration
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReadTxPowerWithLimits
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReadTxPower
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetQuantizationStep
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetProtocolList
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetProtocolConfiguration
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetPowerMode
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetMinimumFrequency
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetGPIODirection
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetGPIO
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTime
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetFrequencyHopTable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetCurrentProtocol
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAvailableRegions
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAvailableProtocols
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAntennaReturnLoss
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdAntennaDetect
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTxRxMapData
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTxRxMapFromPorts
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNumber
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPortValues
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHardwareInfo
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetPerAntennaTime
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_hexDottedQuad
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_reader.o(i.TMR_SR_SerialReader_init)
</UL>
<P><STRONG><a name="[1e]"></a>TMR_SR_paramSet</STRONG> (ARM, 4664 bytes, Stack size 104 bytes, serial_reader.o(i.TMR_SR_paramSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 3512 + Unknown Stack Size
<LI>Call Chain = TMR_SR_paramSet &rArr; TMR_SR_cmdSetUserProfile &rArr; prepForSearch &rArr; setAntennaReadTimeList &rArr; TMR_SR_cmdSetPerAntennaTime &rArr; initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateReadPlan
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramProbe
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetWriteTxPower
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserProfile
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetUserMode
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetTxRxPorts
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionLbtThreshold
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionLbt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionDwellTimeEnable
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegionDwellTime
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetRegion
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReaderWriteTimeOut
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReaderConfiguration
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetReadTxPower
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolList
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolLicenseKey
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocolConfiguration
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetPowerMode
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetGPIODirection
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetFrequencyHopTableOption
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetFrequencyHopTable
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetBaudRate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdResetReaderStats
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdResetReaderStatistics
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetReaderWriteTimeOut
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetProtocolConfiguration
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTxRxMapFromPorts
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProtocol
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPortValues
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetPerAntennaTime
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_reader.o(i.TMR_SR_SerialReader_init)
</UL>
<P><STRONG><a name="[13c]"></a>TMR_SR_read_internal</STRONG> (ARM, 1364 bytes, Stack size 336 bytes, serial_reader.o(i.TMR_SR_read_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 2976 + Unknown Stack Size
<LI>Call Chain = TMR_SR_read_internal &rArr; prepForSearch &rArr; setAntennaReadTimeList &rArr; TMR_SR_cmdSetPerAntennaTime &rArr; initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_gettime_consistent
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_executeEmbeddedRead
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdReadTagMultiple
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdMultipleProtocolSearch
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetTagsRemaining
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read
</UL>

<P><STRONG><a name="[130]"></a>getHardwareInfo</STRONG> (ARM, 76 bytes, Stack size 280 bytes, serial_reader.o(i.getHardwareInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = getHardwareInfo &rArr; TMR_stringCopy &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_stringCopy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_hexDottedQuad
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[12e]"></a>getPortValues</STRONG> (ARM, 332 bytes, Stack size 552 bytes, serial_reader.o(i.getPortValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336 + Unknown Stack Size
<LI>Call Chain = getPortValues &rArr; initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetAntennaPortPowersAndSettlingTime
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTxRxMapFromPorts
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[131]"></a>getSerialNumber</STRONG> (ARM, 224 bytes, Stack size 96 bytes, serial_reader.o(i.getSerialNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736 + Unknown Stack Size
<LI>Call Chain = getSerialNumber &rArr; TMR_SR_cmdGetHardwareVersion &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_stringCopy
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdGetHardwareVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramGet
</UL>

<P><STRONG><a name="[bf]"></a>prepEmbReadTagMultiple</STRONG> (ARM, 168 bytes, Stack size 56 bytes, serial_reader.o(i.prepEmbReadTagMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prepEmbReadTagMultiple &rArr; TMR_SR_msgSetupReadTagMultiple &rArr; TMR_SR_msgSetupReadTagMultipleWithMetadata &rArr; filterbytes &rArr;  filterbytes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_addTagOp
</UL>

<P><STRONG><a name="[165]"></a>setAntennaList</STRONG> (ARM, 208 bytes, Stack size 96 bytes, serial_reader.o(i.setAntennaList))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728 + Unknown Stack Size
<LI>Call Chain = setAntennaList &rArr; TMR_SR_cmdSetAntennaSearchList &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetAntennaSearchList
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepForSearch
</UL>

<P><STRONG><a name="[134]"></a>setPortValues</STRONG> (ARM, 280 bytes, Stack size 552 bytes, serial_reader.o(i.setPortValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336 + Unknown Stack Size
<LI>Call Chain = setPortValues &rArr; initTxRxMapFromPorts &rArr; TMR_SR_cmdAntennaDetect &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetAntennaPortPowersAndSettlingTime
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTxRxMapFromPorts
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[135]"></a>setProtocol</STRONG> (ARM, 76 bytes, Stack size 16 bytes, serial_reader.o(i.setProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = setProtocol &rArr; TMR_SR_cmdSetProtocol &rArr; TMR_SR_sendCmd &rArr; TMR_SR_send &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_cmdSetProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_read_internal
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_paramSet
</UL>

<P><STRONG><a name="[12a]"></a>filterbytes</STRONG> (ARM, 2176 bytes, Stack size 72 bytes, serial_reader_l3.o(i.filterbytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = filterbytes &rArr;  filterbytes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_u8s_per_bits
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_convertToEBV
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockWrite
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockPermaLock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgAddGEN2BlockErase
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_msgSetupReadTagMultipleWithMetadata
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterbytes
</UL>

<P><STRONG><a name="[25]"></a>s_flush</STRONG> (ARM, 40 bytes, Stack size 8 bytes, serial_transport_dummy.o(i.s_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = s_flush &rArr; UART1_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_transport_dummy.o(i.TMR_SR_SerialTransportDummyInit)
</UL>
<P><STRONG><a name="[20]"></a>s_open</STRONG> (ARM, 12 bytes, Stack size 0 bytes, serial_transport_dummy.o(i.s_open))
<BR>[Address Reference Count : 1]<UL><LI> serial_transport_dummy.o(i.TMR_SR_SerialTransportDummyInit)
</UL>
<P><STRONG><a name="[22]"></a>s_receiveBytes</STRONG> (ARM, 100 bytes, Stack size 32 bytes, serial_transport_dummy.o(i.s_receiveBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = s_receiveBytes &rArr; UART1_receivebuffer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_receivebuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_transport_dummy.o(i.TMR_SR_SerialTransportDummyInit)
</UL>
<P><STRONG><a name="[21]"></a>s_sendBytes</STRONG> (ARM, 92 bytes, Stack size 32 bytes, serial_transport_dummy.o(i.s_sendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = s_sendBytes &rArr; UART1_sendbuffer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_sendbuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_transport_dummy.o(i.TMR_SR_SerialTransportDummyInit)
</UL>
<P><STRONG><a name="[23]"></a>s_setBaudRate</STRONG> (ARM, 12 bytes, Stack size 0 bytes, serial_transport_dummy.o(i.s_setBaudRate))
<BR>[Address Reference Count : 1]<UL><LI> serial_transport_dummy.o(i.TMR_SR_SerialTransportDummyInit)
</UL>
<P><STRONG><a name="[24]"></a>s_shutdown</STRONG> (ARM, 12 bytes, Stack size 0 bytes, serial_transport_dummy.o(i.s_shutdown))
<BR>[Address Reference Count : 1]<UL><LI> serial_transport_dummy.o(i.TMR_SR_SerialTransportDummyInit)
</UL>
<P><STRONG><a name="[145]"></a>TMR_initSerialTransportTable</STRONG> (ARM, 272 bytes, Stack size 16 bytes, tm_reader.o(i.TMR_initSerialTransportTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TMR_initSerialTransportTable &rArr; TMR_stringCopy &rArr; tm_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_stringCopy
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_create
</UL>

<P><STRONG><a name="[7e]"></a>HostComm_decode_requests</STRONG> (ARM, 368 bytes, Stack size 16 bytes, hostcommmanager.o(i.HostComm_decode_requests))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HostComm_decode_requests &rArr; Wifi_GET_is_ClientConnected &rArr; Get_Module_Current_State
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_data_bytes
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_GET_is_ClientConnected
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_SET_read_request
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GET_request_status
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_GET_TagInformation
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_Get_System_Init_State
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_Get_Functionality_Init_State
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostComm_Manager
</UL>

<P><STRONG><a name="[6f]"></a>ConfigInit</STRONG> (ARM, 256 bytes, Stack size 104 bytes, reader_manager.o(i.ConfigInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752 + Unknown Stack Size
<LI>Call Chain = ConfigInit &rArr; TMR_SR_connect &rArr; TMR_SR_getVersion &rArr; TMR_SR_cmdVersion &rArr; TMR_SR_sendTimeout &rArr;  TMR_SR_getNextTag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_paramSet
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SR_connect
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_RP_init_simple
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReaderManagerInit
</UL>

<P><STRONG><a name="[a8]"></a>disable_HW_Reader</STRONG> (ARM, 16 bytes, Stack size 0 bytes, reader_manager.o(i.disable_HW_Reader))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
</UL>

<P><STRONG><a name="[aa]"></a>reader_recovery</STRONG> (ARM, 208 bytes, Stack size 24 bytes, reader_manager.o(i.reader_recovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = reader_recovery &rArr; UART1_send_reveice_PING &rArr; UART1_sendbuffer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_send_reveice_PING
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_Wait
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_HW_Reset
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
</UL>

<P><STRONG><a name="[a5]"></a>send_validate_tag_criteria_cmd</STRONG> (ARM, 100 bytes, Stack size 24 bytes, reader_manager.o(i.send_validate_tag_criteria_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send_validate_tag_criteria_cmd &rArr; Wifi_SET_Command_Request
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SET_Command_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reader_Manager
</UL>

<P><STRONG><a name="[15c]"></a>Disable_WIFI_Module_HW</STRONG> (ARM, 24 bytes, Stack size 0 bytes, wifi_manager.o(i.Disable_WIFI_Module_HW))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Manager
</UL>

<P><STRONG><a name="[157]"></a>isPassthroughResponseValid</STRONG> (ARM, 148 bytes, Stack size 8 bytes, wifi_manager.o(i.isPassthroughResponseValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isPassthroughResponseValid &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_GET_passtrough_response
</UL>

<P><STRONG><a name="[74]"></a>Get_Read_Write_Status</STRONG> (ARM, 260 bytes, Stack size 24 bytes, wifi_utils.o(i.Get_Read_Write_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_Read_Write_Status &rArr; spi0_sendReceive_message
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_sendReceive_message
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ESP_Data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ESP_Data
</UL>

<P><STRONG><a name="[ab]"></a>Request_ESP_Send_Permission</STRONG> (ARM, 172 bytes, Stack size 24 bytes, wifi_utils.o(i.Request_ESP_Send_Permission))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Request_ESP_Send_Permission &rArr; spi0_sendReceive_message
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_sendReceive_message
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HandsakePin_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ESP_Command
</UL>

<P><STRONG><a name="[6d]"></a>Wait_for_transition</STRONG> (ARM, 452 bytes, Stack size 16 bytes, wifi_utils.o(i.Wait_for_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Wait_for_transition &rArr; TIMER_SOFTWARE_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_stop_timer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_start_timer
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_reset_timer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_interrupt_pending
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_clear_interrupt
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HandsakePin_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_HIGH_Transition
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ESP_Command
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_for_WiFi_Update
</UL>

<P><STRONG><a name="[b4]"></a>Write_ESP_Data</STRONG> (ARM, 152 bytes, Stack size 4184 bytes, wifi_utils.o(i.Write_ESP_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4224<LI>Call Chain = Write_ESP_Data &rArr; Get_Read_Write_Status &rArr; spi0_sendReceive_message
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_sendReceive_message
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Write_EOF
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Read_Write_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ESP_Command
</UL>

<P><STRONG><a name="[8f]"></a>send_Read_EOF</STRONG> (ARM, 36 bytes, Stack size 8 bytes, wifi_utils.o(i.send_Read_EOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_Read_EOF &rArr; spi0_sendReceive_message
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_sendReceive_message
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ESP_Data
</UL>

<P><STRONG><a name="[15e]"></a>send_Write_EOF</STRONG> (ARM, 36 bytes, Stack size 8 bytes, wifi_utils.o(i.send_Write_EOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_Write_EOF &rArr; spi0_sendReceive_message
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_sendReceive_message
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ESP_Data
</UL>

<P><STRONG><a name="[69]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[68]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[67]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[6a]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[16]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[64]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5d]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[47]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[48]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
